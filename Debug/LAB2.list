
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e7c  08007350  08007350  00008350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081cc  080081cc  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080081cc  080081cc  000091cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d4  080081d4  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d4  080081d4  000091d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081d8  080081d8  000091d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080081dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a064  2**0
                  CONTENTS
 10 .bss          00000724  20000064  20000064  0000a064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000788  20000788  0000a064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014618  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c15  00000000  00000000  0001e6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  000212c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f38  00000000  00000000  00022618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002544b  00000000  00000000  00023550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a81  00000000  00000000  0004899b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df4a4  00000000  00000000  0006041c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f8c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057d4  00000000  00000000  0013f904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  001450d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007338 	.word	0x08007338

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08007338 	.word	0x08007338

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SH1106_Init>:
static SH1106_t SH1106;

#define SH1106_NORMALDISPLAY       0xA6
#define SH1106_INVERTDISPLAY       0xA7

uint8_t SH1106_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SH1106_I2C, SH1106_I2C_ADDR, 1, 20000) != HAL_OK) {
 80005f2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80005f6:	2201      	movs	r2, #1
 80005f8:	2178      	movs	r1, #120	@ 0x78
 80005fa:	484c      	ldr	r0, [pc, #304]	@ (800072c <SH1106_Init+0x140>)
 80005fc:	f002 fdc6 	bl	800318c <HAL_I2C_IsDeviceReady>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SH1106_Init+0x1e>
		/* Return false */
		return 0;
 8000606:	2300      	movs	r3, #0
 8000608:	e08b      	b.n	8000722 <SH1106_Init+0x136>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800060a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800060e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000610:	e002      	b.n	8000618 <SH1106_Init+0x2c>
		p--;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3b01      	subs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1f9      	bne.n	8000612 <SH1106_Init+0x26>
	
	  // Initialize the display
	SH1106_WRITECOMMAND(0xAE); //display off
 800061e:	22ae      	movs	r2, #174	@ 0xae
 8000620:	2100      	movs	r1, #0
 8000622:	2078      	movs	r0, #120	@ 0x78
 8000624:	f000 fa54 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xB0|0x00); //Set Page Start Address for Page Addressing Mode,0-7
 8000628:	22b0      	movs	r2, #176	@ 0xb0
 800062a:	2100      	movs	r1, #0
 800062c:	2078      	movs	r0, #120	@ 0x78
 800062e:	f000 fa4f 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x81); //--set contrast control register
 8000632:	2281      	movs	r2, #129	@ 0x81
 8000634:	2100      	movs	r1, #0
 8000636:	2078      	movs	r0, #120	@ 0x78
 8000638:	f000 fa4a 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xFF); // contrast value
 800063c:	22ff      	movs	r2, #255	@ 0xff
 800063e:	2100      	movs	r1, #0
 8000640:	2078      	movs	r0, #120	@ 0x78
 8000642:	f000 fa45 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000646:	22a1      	movs	r2, #161	@ 0xa1
 8000648:	2100      	movs	r1, #0
 800064a:	2078      	movs	r0, #120	@ 0x78
 800064c:	f000 fa40 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA6); //--set normal display
 8000650:	22a6      	movs	r2, #166	@ 0xa6
 8000652:	2100      	movs	r1, #0
 8000654:	2078      	movs	r0, #120	@ 0x78
 8000656:	f000 fa3b 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800065a:	22a8      	movs	r2, #168	@ 0xa8
 800065c:	2100      	movs	r1, #0
 800065e:	2078      	movs	r0, #120	@ 0x78
 8000660:	f000 fa36 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x3F); // multiplex value
 8000664:	223f      	movs	r2, #63	@ 0x3f
 8000666:	2100      	movs	r1, #0
 8000668:	2078      	movs	r0, #120	@ 0x78
 800066a:	f000 fa31 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAD); // Set Pump Mode
 800066e:	22ad      	movs	r2, #173	@ 0xad
 8000670:	2100      	movs	r1, #0
 8000672:	2078      	movs	r0, #120	@ 0x78
 8000674:	f000 fa2c 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x8B); // Pump ON
 8000678:	228b      	movs	r2, #139	@ 0x8b
 800067a:	2100      	movs	r1, #0
 800067c:	2078      	movs	r0, #120	@ 0x78
 800067e:	f000 fa27 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x30|0x02); // Set Pump Voltage 8.0
 8000682:	2232      	movs	r2, #50	@ 0x32
 8000684:	2100      	movs	r1, #0
 8000686:	2078      	movs	r0, #120	@ 0x78
 8000688:	f000 fa22 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800068c:	22c8      	movs	r2, #200	@ 0xc8
 800068e:	2100      	movs	r1, #0
 8000690:	2078      	movs	r0, #120	@ 0x78
 8000692:	f000 fa1d 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD3); //-set display offset
 8000696:	22d3      	movs	r2, #211	@ 0xd3
 8000698:	2100      	movs	r1, #0
 800069a:	2078      	movs	r0, #120	@ 0x78
 800069c:	f000 fa18 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x00); //-not offset
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2078      	movs	r0, #120	@ 0x78
 80006a6:	f000 fa13 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80006aa:	22d5      	movs	r2, #213	@ 0xd5
 80006ac:	2100      	movs	r1, #0
 80006ae:	2078      	movs	r0, #120	@ 0x78
 80006b0:	f000 fa0e 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x80); //--set divide ratio
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	2100      	movs	r1, #0
 80006b8:	2078      	movs	r0, #120	@ 0x78
 80006ba:	f000 fa09 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xD9); //--set pre-charge period
 80006be:	22d9      	movs	r2, #217	@ 0xd9
 80006c0:	2100      	movs	r1, #0
 80006c2:	2078      	movs	r0, #120	@ 0x78
 80006c4:	f000 fa04 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x1F); //
 80006c8:	221f      	movs	r2, #31
 80006ca:	2100      	movs	r1, #0
 80006cc:	2078      	movs	r0, #120	@ 0x78
 80006ce:	f000 f9ff 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80006d2:	22da      	movs	r2, #218	@ 0xda
 80006d4:	2100      	movs	r1, #0
 80006d6:	2078      	movs	r0, #120	@ 0x78
 80006d8:	f000 f9fa 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x12);
 80006dc:	2212      	movs	r2, #18
 80006de:	2100      	movs	r1, #0
 80006e0:	2078      	movs	r0, #120	@ 0x78
 80006e2:	f000 f9f5 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xDB); //--set vcomh
 80006e6:	22db      	movs	r2, #219	@ 0xdb
 80006e8:	2100      	movs	r1, #0
 80006ea:	2078      	movs	r0, #120	@ 0x78
 80006ec:	f000 f9f0 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0x40); //
 80006f0:	2240      	movs	r2, #64	@ 0x40
 80006f2:	2100      	movs	r1, #0
 80006f4:	2078      	movs	r0, #120	@ 0x78
 80006f6:	f000 f9eb 	bl	8000ad0 <SH1106_I2C_Write>
	SH1106_WRITECOMMAND(0xAF); //--turn on SH1106 panel
 80006fa:	22af      	movs	r2, #175	@ 0xaf
 80006fc:	2100      	movs	r1, #0
 80006fe:	2078      	movs	r0, #120	@ 0x78
 8000700:	f000 f9e6 	bl	8000ad0 <SH1106_I2C_Write>


	/* Clear screen */
	SH1106_Fill(SH1106_COLOR_BLACK);
 8000704:	2000      	movs	r0, #0
 8000706:	f000 f843 	bl	8000790 <SH1106_Fill>
	
	/* Update screen */
	SH1106_UpdateScreen();
 800070a:	f000 f813 	bl	8000734 <SH1106_UpdateScreen>
	
	/* Set default values */
	SH1106.CurrentX = 0;
 800070e:	4b08      	ldr	r3, [pc, #32]	@ (8000730 <SH1106_Init+0x144>)
 8000710:	2200      	movs	r2, #0
 8000712:	801a      	strh	r2, [r3, #0]
	SH1106.CurrentY = 0;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <SH1106_Init+0x144>)
 8000716:	2200      	movs	r2, #0
 8000718:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SH1106.Initialized = 1;
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <SH1106_Init+0x144>)
 800071c:	2201      	movs	r2, #1
 800071e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000720:	2301      	movs	r3, #1
}
 8000722:	4618      	mov	r0, r3
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000488 	.word	0x20000488
 8000730:	20000480 	.word	0x20000480

08000734 <SH1106_UpdateScreen>:

void SH1106_UpdateScreen(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e01d      	b.n	800077c <SH1106_UpdateScreen+0x48>
		SH1106_WRITECOMMAND(0xB0 + m);
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	3b50      	subs	r3, #80	@ 0x50
 8000744:	b2db      	uxtb	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	2078      	movs	r0, #120	@ 0x78
 800074c:	f000 f9c0 	bl	8000ad0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x00);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2078      	movs	r0, #120	@ 0x78
 8000756:	f000 f9bb 	bl	8000ad0 <SH1106_I2C_Write>
		SH1106_WRITECOMMAND(0x10);
 800075a:	2210      	movs	r2, #16
 800075c:	2100      	movs	r1, #0
 800075e:	2078      	movs	r0, #120	@ 0x78
 8000760:	f000 f9b6 	bl	8000ad0 <SH1106_I2C_Write>
		
		/* Write multi data */
		SH1106_I2C_WriteMulti(SH1106_I2C_ADDR, 0x40, &SH1106_Buffer[SH1106_WIDTH * m], SH1106_WIDTH);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	01db      	lsls	r3, r3, #7
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <SH1106_UpdateScreen+0x58>)
 800076a:	441a      	add	r2, r3
 800076c:	2380      	movs	r3, #128	@ 0x80
 800076e:	2140      	movs	r1, #64	@ 0x40
 8000770:	2078      	movs	r0, #120	@ 0x78
 8000772:	f000 f947 	bl	8000a04 <SH1106_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3301      	adds	r3, #1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b07      	cmp	r3, #7
 8000780:	d9de      	bls.n	8000740 <SH1106_UpdateScreen+0xc>
	}
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000080 	.word	0x20000080

08000790 <SH1106_Fill>:
	for (i = 0; i < sizeof(SH1106_Buffer); i++) {
		SH1106_Buffer[i] = ~SH1106_Buffer[i];
	}
}

void SH1106_Fill(SH1106_COLOR_t color) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SH1106_Buffer, (color == SH1106_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SH1106_Buffer));
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d101      	bne.n	80007a4 <SH1106_Fill+0x14>
 80007a0:	2300      	movs	r3, #0
 80007a2:	e000      	b.n	80007a6 <SH1106_Fill+0x16>
 80007a4:	23ff      	movs	r3, #255	@ 0xff
 80007a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007aa:	4619      	mov	r1, r3
 80007ac:	4803      	ldr	r0, [pc, #12]	@ (80007bc <SH1106_Fill+0x2c>)
 80007ae:	f006 f92b 	bl	8006a08 <memset>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000080 	.word	0x20000080

080007c0 <SH1106_DrawPixel>:

void SH1106_DrawPixel(uint16_t x, uint16_t y, SH1106_COLOR_t color) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
 80007ca:	460b      	mov	r3, r1
 80007cc:	80bb      	strh	r3, [r7, #4]
 80007ce:	4613      	mov	r3, r2
 80007d0:	70fb      	strb	r3, [r7, #3]
	if (
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80007d6:	d848      	bhi.n	800086a <SH1106_DrawPixel+0xaa>
		x >= SH1106_WIDTH ||
 80007d8:	88bb      	ldrh	r3, [r7, #4]
 80007da:	2b3f      	cmp	r3, #63	@ 0x3f
 80007dc:	d845      	bhi.n	800086a <SH1106_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SH1106.Inverted) {
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <SH1106_DrawPixel+0xb8>)
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d006      	beq.n	80007f4 <SH1106_DrawPixel+0x34>
		color = (SH1106_COLOR_t)!color;
 80007e6:	78fb      	ldrb	r3, [r7, #3]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf0c      	ite	eq
 80007ec:	2301      	moveq	r3, #1
 80007ee:	2300      	movne	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SH1106_COLOR_WHITE) {
 80007f4:	78fb      	ldrb	r3, [r7, #3]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d11a      	bne.n	8000830 <SH1106_DrawPixel+0x70>
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] |= 1 << (y % 8);
 80007fa:	88fa      	ldrh	r2, [r7, #6]
 80007fc:	88bb      	ldrh	r3, [r7, #4]
 80007fe:	08db      	lsrs	r3, r3, #3
 8000800:	b298      	uxth	r0, r3
 8000802:	4603      	mov	r3, r0
 8000804:	01db      	lsls	r3, r3, #7
 8000806:	4413      	add	r3, r2
 8000808:	4a1c      	ldr	r2, [pc, #112]	@ (800087c <SH1106_DrawPixel+0xbc>)
 800080a:	5cd3      	ldrb	r3, [r2, r3]
 800080c:	b25a      	sxtb	r2, r3
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	f003 0307 	and.w	r3, r3, #7
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	b25b      	sxtb	r3, r3
 800081c:	4313      	orrs	r3, r2
 800081e:	b259      	sxtb	r1, r3
 8000820:	88fa      	ldrh	r2, [r7, #6]
 8000822:	4603      	mov	r3, r0
 8000824:	01db      	lsls	r3, r3, #7
 8000826:	4413      	add	r3, r2
 8000828:	b2c9      	uxtb	r1, r1
 800082a:	4a14      	ldr	r2, [pc, #80]	@ (800087c <SH1106_DrawPixel+0xbc>)
 800082c:	54d1      	strb	r1, [r2, r3]
 800082e:	e01d      	b.n	800086c <SH1106_DrawPixel+0xac>
	} else {
		SH1106_Buffer[x + (y / 8) * SH1106_WIDTH] &= ~(1 << (y % 8));
 8000830:	88fa      	ldrh	r2, [r7, #6]
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b298      	uxth	r0, r3
 8000838:	4603      	mov	r3, r0
 800083a:	01db      	lsls	r3, r3, #7
 800083c:	4413      	add	r3, r2
 800083e:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <SH1106_DrawPixel+0xbc>)
 8000840:	5cd3      	ldrb	r3, [r2, r3]
 8000842:	b25a      	sxtb	r2, r3
 8000844:	88bb      	ldrh	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	43db      	mvns	r3, r3
 8000854:	b25b      	sxtb	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	b259      	sxtb	r1, r3
 800085a:	88fa      	ldrh	r2, [r7, #6]
 800085c:	4603      	mov	r3, r0
 800085e:	01db      	lsls	r3, r3, #7
 8000860:	4413      	add	r3, r2
 8000862:	b2c9      	uxtb	r1, r1
 8000864:	4a05      	ldr	r2, [pc, #20]	@ (800087c <SH1106_DrawPixel+0xbc>)
 8000866:	54d1      	strb	r1, [r2, r3]
 8000868:	e000      	b.n	800086c <SH1106_DrawPixel+0xac>
		return;
 800086a:	bf00      	nop
	}
}
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000480 	.word	0x20000480
 800087c:	20000080 	.word	0x20000080

08000880 <SH1106_GotoXY>:

void SH1106_GotoXY(uint16_t x, uint16_t y) {
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	80fb      	strh	r3, [r7, #6]
 800088c:	4613      	mov	r3, r2
 800088e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SH1106.CurrentX = x;
 8000890:	4a05      	ldr	r2, [pc, #20]	@ (80008a8 <SH1106_GotoXY+0x28>)
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	8013      	strh	r3, [r2, #0]
	SH1106.CurrentY = y;
 8000896:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <SH1106_GotoXY+0x28>)
 8000898:	88bb      	ldrh	r3, [r7, #4]
 800089a:	8053      	strh	r3, [r2, #2]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	20000480 	.word	0x20000480

080008ac <SH1106_Putc>:

char SH1106_Putc(char ch, FontDef_t* Font, SH1106_COLOR_t color) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 80008bc:	4b39      	ldr	r3, [pc, #228]	@ (80009a4 <SH1106_Putc+0xf8>)
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
	if (
 80008c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80008ca:	dc07      	bgt.n	80008dc <SH1106_Putc+0x30>
		SH1106_HEIGHT <= (SH1106.CurrentY + Font->FontHeight)
 80008cc:	4b35      	ldr	r3, [pc, #212]	@ (80009a4 <SH1106_Putc+0xf8>)
 80008ce:	885b      	ldrh	r3, [r3, #2]
 80008d0:	461a      	mov	r2, r3
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	785b      	ldrb	r3, [r3, #1]
 80008d6:	4413      	add	r3, r2
		SH1106_WIDTH <= (SH1106.CurrentX + Font->FontWidth) ||
 80008d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008da:	dd01      	ble.n	80008e0 <SH1106_Putc+0x34>
	) {
		/* Error */
		return 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	e05d      	b.n	800099c <SH1106_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	e04b      	b.n	800097e <SH1106_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685a      	ldr	r2, [r3, #4]
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	3b20      	subs	r3, #32
 80008ee:	6839      	ldr	r1, [r7, #0]
 80008f0:	7849      	ldrb	r1, [r1, #1]
 80008f2:	fb01 f303 	mul.w	r3, r1, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	440b      	add	r3, r1
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	e030      	b.n	800096c <SH1106_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d010      	beq.n	800093c <SH1106_Putc+0x90>
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t) color);
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <SH1106_Putc+0xf8>)
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	b29b      	uxth	r3, r3
 8000922:	4413      	add	r3, r2
 8000924:	b298      	uxth	r0, r3
 8000926:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <SH1106_Putc+0xf8>)
 8000928:	885a      	ldrh	r2, [r3, #2]
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	b29b      	uxth	r3, r3
 800092e:	4413      	add	r3, r2
 8000930:	b29b      	uxth	r3, r3
 8000932:	79ba      	ldrb	r2, [r7, #6]
 8000934:	4619      	mov	r1, r3
 8000936:	f7ff ff43 	bl	80007c0 <SH1106_DrawPixel>
 800093a:	e014      	b.n	8000966 <SH1106_Putc+0xba>
			} else {
				SH1106_DrawPixel(SH1106.CurrentX + j, (SH1106.CurrentY + i), (SH1106_COLOR_t)!color);
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <SH1106_Putc+0xf8>)
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	b29b      	uxth	r3, r3
 8000944:	4413      	add	r3, r2
 8000946:	b298      	uxth	r0, r3
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <SH1106_Putc+0xf8>)
 800094a:	885a      	ldrh	r2, [r3, #2]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	b29b      	uxth	r3, r3
 8000950:	4413      	add	r3, r2
 8000952:	b299      	uxth	r1, r3
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf0c      	ite	eq
 800095a:	2301      	moveq	r3, #1
 800095c:	2300      	movne	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	f7ff ff2d 	bl	80007c0 <SH1106_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	3301      	adds	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4293      	cmp	r3, r2
 8000976:	d3c8      	bcc.n	800090a <SH1106_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	785b      	ldrb	r3, [r3, #1]
 8000982:	461a      	mov	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	4293      	cmp	r3, r2
 8000988:	d3ad      	bcc.n	80008e6 <SH1106_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SH1106.CurrentX += Font->FontWidth;
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <SH1106_Putc+0xf8>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	4413      	add	r3, r2
 8000994:	b29a      	uxth	r2, r3
 8000996:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <SH1106_Putc+0xf8>)
 8000998:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800099a:	79fb      	ldrb	r3, [r7, #7]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000480 	.word	0x20000480

080009a8 <SH1106_Puts>:

char SH1106_Puts(char* str, FontDef_t* Font, SH1106_COLOR_t color) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	4613      	mov	r3, r2
 80009b4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80009b6:	e012      	b.n	80009de <SH1106_Puts+0x36>
		/* Write character by character */
		if (SH1106_Putc(*str, Font, color) != *str) {
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	68b9      	ldr	r1, [r7, #8]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff73 	bl	80008ac <SH1106_Putc>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d002      	beq.n	80009d8 <SH1106_Puts+0x30>
			/* Return error */
			return *str;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	e008      	b.n	80009ea <SH1106_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d1e8      	bne.n	80009b8 <SH1106_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	781b      	ldrb	r3, [r3, #0]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <SH1106_Clear>:
}
 


void SH1106_Clear (void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0
	SH1106_Fill (0);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff feca 	bl	8000790 <SH1106_Fill>
    SH1106_UpdateScreen();
 80009fc:	f7ff fe9a 	bl	8000734 <SH1106_UpdateScreen>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SH1106_I2C_WriteMulti>:
	SH1106_WRITECOMMAND(0x8D);
	SH1106_WRITECOMMAND(0x10);
	SH1106_WRITECOMMAND(0xAE);
}

void SH1106_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b0c7      	sub	sp, #284	@ 0x11c
 8000a08:	af02      	add	r7, sp, #8
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000a12:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000a16:	600a      	str	r2, [r1, #0]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a1e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a22:	4622      	mov	r2, r4
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a2a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000a2e:	4602      	mov	r2, r0
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a3a:	460a      	mov	r2, r1
 8000a3c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000a46:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a4a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000a4e:	7812      	ldrb	r2, [r2, #0]
 8000a50:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a58:	e015      	b.n	8000a86 <SH1106_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000a5a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a62:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	441a      	add	r2, r3
 8000a6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a6e:	3301      	adds	r3, #1
 8000a70:	7811      	ldrb	r1, [r2, #0]
 8000a72:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a76:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000a7a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000a7c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a80:	3301      	adds	r3, #1
 8000a82:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000a86:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a90:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000a94:	8812      	ldrh	r2, [r2, #0]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d8df      	bhi.n	8000a5a <SH1106_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, count+1, 10);
 8000a9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a9e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b299      	uxth	r1, r3
 8000aa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aaa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	f107 020c 	add.w	r2, r7, #12
 8000ab8:	200a      	movs	r0, #10
 8000aba:	9000      	str	r0, [sp, #0]
 8000abc:	4803      	ldr	r0, [pc, #12]	@ (8000acc <SH1106_I2C_WriteMulti+0xc8>)
 8000abe:	f001 ff3b 	bl	8002938 <HAL_I2C_Master_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	20000488 	.word	0x20000488

08000ad0 <SH1106_I2C_Write>:


void SH1106_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	460b      	mov	r3, r1
 8000adc:	71bb      	strb	r3, [r7, #6]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000ae6:	797b      	ldrb	r3, [r7, #5]
 8000ae8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SH1106_I2C, address, dt, 2, 10);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	b299      	uxth	r1, r3
 8000aee:	f107 020c 	add.w	r2, r7, #12
 8000af2:	230a      	movs	r3, #10
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2302      	movs	r3, #2
 8000af8:	4803      	ldr	r0, [pc, #12]	@ (8000b08 <SH1106_I2C_Write+0x38>)
 8000afa:	f001 ff1d 	bl	8002938 <HAL_I2C_Master_Transmit>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000488 	.word	0x20000488

08000b0c <SetTime>:
};

typedef struct Time Time;
//

void SetTime(Time timeSet){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af04      	add	r7, sp, #16
 8000b12:	463b      	mov	r3, r7
 8000b14:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_I2C_Mem_Write(&hi2c3, 0xD0, 0, 1, (uint8_t *)&timeSet, 7, 1000);
 8000b18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	2307      	movs	r3, #7
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	463b      	mov	r3, r7
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	21d0      	movs	r1, #208	@ 0xd0
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <SetTime+0x30>)
 8000b2e:	f002 f801 	bl	8002b34 <HAL_I2C_Mem_Write>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000488 	.word	0x20000488

08000b40 <GetTime>:

Time GetTime(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
	Time timeGet;
	HAL_I2C_Mem_Read(&hi2c3, 0xD1, 0, 1, (uint8_t *)&timeGet, 7, 1000);
 8000b48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b4c:	9302      	str	r3, [sp, #8]
 8000b4e:	2307      	movs	r3, #7
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	21d1      	movs	r1, #209	@ 0xd1
 8000b5e:	4808      	ldr	r0, [pc, #32]	@ (8000b80 <GetTime+0x40>)
 8000b60:	f002 f8e2 	bl	8002d28 <HAL_I2C_Mem_Read>
	return timeGet;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	461a      	mov	r2, r3
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	6010      	str	r0, [r2, #0]
 8000b70:	8899      	ldrh	r1, [r3, #4]
 8000b72:	799b      	ldrb	r3, [r3, #6]
 8000b74:	8091      	strh	r1, [r2, #4]
 8000b76:	7193      	strb	r3, [r2, #6]
}
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000488 	.word	0x20000488

08000b84 <Display>:
	SH1106_GotoXY (12,10); // goto 10, 10
	SH1106_Puts(buff, &Font_11x18, 1);
	SH1106_UpdateScreen(); // update screen
}

void Display(char* str){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
		SH1106_Clear();
 8000b8c:	f7ff ff31 	bl	80009f2 <SH1106_Clear>
		SH1106_GotoXY (12,10); // goto 10, 10
 8000b90:	210a      	movs	r1, #10
 8000b92:	200c      	movs	r0, #12
 8000b94:	f7ff fe74 	bl	8000880 <SH1106_GotoXY>
		SH1106_Puts(str, &Font_11x18, 1);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4905      	ldr	r1, [pc, #20]	@ (8000bb0 <Display+0x2c>)
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff03 	bl	80009a8 <SH1106_Puts>
		SH1106_UpdateScreen(); // update screen
 8000ba2:	f7ff fdc7 	bl	8000734 <SH1106_UpdateScreen>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <HAL_UART_RxCpltCallback>:
}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a12      	ldr	r2, [pc, #72]	@ (8000c0c <HAL_UART_RxCpltCallback+0x58>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d11d      	bne.n	8000c02 <HAL_UART_RxCpltCallback+0x4e>
        if(recByte != 'm'){
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_UART_RxCpltCallback+0x5c>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b6d      	cmp	r3, #109	@ 0x6d
 8000bcc:	d009      	beq.n	8000be2 <HAL_UART_RxCpltCallback+0x2e>
        	cmdBuffer[cmdIndex++] = recByte;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_UART_RxCpltCallback+0x60>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	490f      	ldr	r1, [pc, #60]	@ (8000c14 <HAL_UART_RxCpltCallback+0x60>)
 8000bd6:	600a      	str	r2, [r1, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <HAL_UART_RxCpltCallback+0x5c>)
 8000bda:	7811      	ldrb	r1, [r2, #0]
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <HAL_UART_RxCpltCallback+0x64>)
 8000bde:	54d1      	strb	r1, [r2, r3]
 8000be0:	e00a      	b.n	8000bf8 <HAL_UART_RxCpltCallback+0x44>
        }
        else{
        	cmdBuffer[cmdIndex] = 0;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <HAL_UART_RxCpltCallback+0x60>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0c      	ldr	r2, [pc, #48]	@ (8000c18 <HAL_UART_RxCpltCallback+0x64>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	54d1      	strb	r1, [r2, r3]
        	cmdIndex = 0;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <HAL_UART_RxCpltCallback+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
        	data_receive_flag = 1;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <HAL_UART_RxCpltCallback+0x68>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, (uint8_t*)&recByte, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4905      	ldr	r1, [pc, #20]	@ (8000c10 <HAL_UART_RxCpltCallback+0x5c>)
 8000bfc:	4808      	ldr	r0, [pc, #32]	@ (8000c20 <HAL_UART_RxCpltCallback+0x6c>)
 8000bfe:	f004 ff66 	bl	8005ace <HAL_UART_Receive_IT>
    }
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	20000630 	.word	0x20000630
 8000c14:	20000634 	.word	0x20000634
 8000c18:	200005cc 	.word	0x200005cc
 8000c1c:	200005c8 	.word	0x200005c8
 8000c20:	2000057c 	.word	0x2000057c

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c26:	f5ad 4d9d 	sub.w	sp, sp, #20096	@ 0x4e80
 8000c2a:	b09b      	sub	sp, #108	@ 0x6c
 8000c2c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	char logs[100][100];
	char cardList[100][100];
	int numCard = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000c34:	f102 024c 	add.w	r2, r2, #76	@ 0x4c
 8000c38:	6013      	str	r3, [r2, #0]
	int numLog = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000c40:	f102 0248 	add.w	r2, r2, #72	@ 0x48
 8000c44:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c46:	f001 f933 	bl	8001eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c4a:	f000 fa91 	bl	8001170 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4e:	f000 fbd3 	bl	80013f8 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000c52:	f000 fafd 	bl	8001250 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000c56:	f000 fb3b 	bl	80012d0 <MX_SPI4_Init>
  MX_USART1_UART_Init();
 8000c5a:	f000 fba3 	bl	80013a4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000c5e:	f000 fb6d 	bl	800133c <MX_TIM6_Init>
//  SH1106_GotoXY (12,10); // goto 10, 10
//  SH1106_Puts(buf, &Font_11x18, 1);
//  SH1106_UpdateScreen(); // update screen
//  HAL_Delay(1000);

  HAL_TIM_Base_Start_IT(&htim6);
 8000c62:	48d5      	ldr	r0, [pc, #852]	@ (8000fb8 <main+0x394>)
 8000c64:	f004 fb8a 	bl	800537c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SH1106_Init();
 8000c68:	f7ff fcc0 	bl	80005ec <SH1106_Init>

  Time currentTime;
  currentTime.year = 2025;
 8000c6c:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000c70:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000c74:	22e9      	movs	r2, #233	@ 0xe9
 8000c76:	719a      	strb	r2, [r3, #6]
  currentTime.weekday = 00;
 8000c78:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000c7c:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000c80:	2200      	movs	r2, #0
 8000c82:	70da      	strb	r2, [r3, #3]
  currentTime.month = 05;
 8000c84:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000c88:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000c8c:	2205      	movs	r2, #5
 8000c8e:	715a      	strb	r2, [r3, #5]
  currentTime.day = 17;
 8000c90:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000c94:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000c98:	2211      	movs	r2, #17
 8000c9a:	711a      	strb	r2, [r3, #4]
  currentTime.hour = 13;
 8000c9c:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000ca0:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000ca4:	220d      	movs	r2, #13
 8000ca6:	709a      	strb	r2, [r3, #2]
  currentTime.min = 46;
 8000ca8:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000cac:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000cb0:	222e      	movs	r2, #46	@ 0x2e
 8000cb2:	705a      	strb	r2, [r3, #1]
  currentTime.sec = 0;
 8000cb4:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000cb8:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]

  SetTime(currentTime);
 8000cc0:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000cc4:	f6a3 6348 	subw	r3, r3, #3656	@ 0xe48
 8000cc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ccc:	f7ff ff1e 	bl	8000b0c <SetTime>

  HAL_UART_Receive_IT(&huart1, (uint8_t*)&recByte, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	49ba      	ldr	r1, [pc, #744]	@ (8000fbc <main+0x398>)
 8000cd4:	48ba      	ldr	r0, [pc, #744]	@ (8000fc0 <main+0x39c>)
 8000cd6:	f004 fefa 	bl	8005ace <HAL_UART_Receive_IT>
//  TestDS1307();
  TM_MFRC522_Init();
 8000cda:	f000 fdfb 	bl	80018d4 <TM_MFRC522_Init>
//			SH1106_UpdateScreen(); // update screen
//	  }

//	  SH1106_Clear();
	  uint8_t CardID[5];
	  HAL_Delay(100);
 8000cde:	2064      	movs	r0, #100	@ 0x64
 8000ce0:	f001 f958 	bl	8001f94 <HAL_Delay>
	  if(TM_MFRC522_Check(CardID) == MI_OK){
 8000ce4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000ce8:	3b50      	subs	r3, #80	@ 0x50
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fe18 	bl	8001920 <TM_MFRC522_Check>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 80f4 	bne.w	8000ee0 <main+0x2bc>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cfe:	48b1      	ldr	r0, [pc, #708]	@ (8000fc4 <main+0x3a0>)
 8000d00:	f001 fcbc 	bl	800267c <HAL_GPIO_WritePin>
		  char cardID[11] = {0};
 8000d04:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000d08:	f6a3 635c 	subw	r3, r3, #3676	@ 0xe5c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2300      	movs	r3, #0
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	6053      	str	r3, [r2, #4]
 8000d14:	f8c2 3007 	str.w	r3, [r2, #7]
		  sprintf(cardID,"%d%d%d%d%d",CardID[0],CardID[1],CardID[2],CardID[3],CardID[4]);
 8000d18:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000d1c:	f5a3 6365 	sub.w	r3, r3, #3664	@ 0xe50
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461c      	mov	r4, r3
 8000d24:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000d28:	f5a3 6365 	sub.w	r3, r3, #3664	@ 0xe50
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	461d      	mov	r5, r3
 8000d30:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000d34:	f5a3 6365 	sub.w	r3, r3, #3664	@ 0xe50
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000d40:	f5a3 6365 	sub.w	r3, r3, #3664	@ 0xe50
 8000d44:	78db      	ldrb	r3, [r3, #3]
 8000d46:	4619      	mov	r1, r3
 8000d48:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000d4c:	f5a3 6365 	sub.w	r3, r3, #3664	@ 0xe50
 8000d50:	791b      	ldrb	r3, [r3, #4]
 8000d52:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8000d56:	385c      	subs	r0, #92	@ 0x5c
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	9101      	str	r1, [sp, #4]
 8000d5c:	9200      	str	r2, [sp, #0]
 8000d5e:	462b      	mov	r3, r5
 8000d60:	4622      	mov	r2, r4
 8000d62:	4999      	ldr	r1, [pc, #612]	@ (8000fc8 <main+0x3a4>)
 8000d64:	f005 fe2e 	bl	80069c4 <siprintf>
		  int flag = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000d6e:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8000d72:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i< numCard;i++){
 8000d74:	2300      	movs	r3, #0
 8000d76:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000d7a:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	e096      	b.n	8000eb0 <main+0x28c>
			  if(strcmp(cardList[i], cardID) == 0){ // strcmp??
 8000d82:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000d86:	3b40      	subs	r3, #64	@ 0x40
 8000d88:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000d8c:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8000d90:	6812      	ldr	r2, [r2, #0]
 8000d92:	2164      	movs	r1, #100	@ 0x64
 8000d94:	fb01 f202 	mul.w	r2, r1, r2
 8000d98:	441a      	add	r2, r3
 8000d9a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000d9e:	3b5c      	subs	r3, #92	@ 0x5c
 8000da0:	4619      	mov	r1, r3
 8000da2:	4610      	mov	r0, r2
 8000da4:	f7ff fa24 	bl	80001f0 <strcmp>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d175      	bne.n	8000e9a <main+0x276>
				  flag = 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000db4:	f102 0244 	add.w	r2, r2, #68	@ 0x44
 8000db8:	6013      	str	r3, [r2, #0]
				  Display("Welcome");
 8000dba:	4884      	ldr	r0, [pc, #528]	@ (8000fcc <main+0x3a8>)
 8000dbc:	f7ff fee2 	bl	8000b84 <Display>
				  char tmp[100] = {0};
 8000dc0:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000dc4:	f6a3 63c8 	subw	r3, r3, #3784	@ 0xec8
 8000dc8:	4618      	mov	r0, r3
 8000dca:	2364      	movs	r3, #100	@ 0x64
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f005 fe1a 	bl	8006a08 <memset>
				  struct Time time = GetTime();
 8000dd4:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000dd8:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff feaf 	bl	8000b40 <GetTime>
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
				 				  cardID,
				 				  time.hour,
 8000de2:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000de6:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000dea:	789b      	ldrb	r3, [r3, #2]
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
 8000dec:	469c      	mov	ip, r3
				 				  time.min,
 8000dee:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000df2:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000df6:	785b      	ldrb	r3, [r3, #1]
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
 8000df8:	4619      	mov	r1, r3
				 				  time.sec,
 8000dfa:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000dfe:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000e02:	781b      	ldrb	r3, [r3, #0]
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
 8000e04:	461c      	mov	r4, r3
				 				  time.weekday,
 8000e06:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000e0a:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000e0e:	78db      	ldrb	r3, [r3, #3]
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
 8000e10:	461d      	mov	r5, r3
				 				  time.day,
 8000e12:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000e16:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000e1a:	791b      	ldrb	r3, [r3, #4]
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
 8000e1c:	461e      	mov	r6, r3
				 				  time.month,
 8000e1e:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000e22:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000e26:	795b      	ldrb	r3, [r3, #5]
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
 8000e28:	607b      	str	r3, [r7, #4]
				 				  time.year);
 8000e2a:	f507 636d 	add.w	r3, r7, #3792	@ 0xed0
 8000e2e:	f6a3 6364 	subw	r3, r3, #3684	@ 0xe64
 8000e32:	799b      	ldrb	r3, [r3, #6]
				 sprintf(tmp,"%s %02d:%02d:%02d-%02d-%02d/%02d/%02d",
 8000e34:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000e38:	3a5c      	subs	r2, #92	@ 0x5c
 8000e3a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000e3e:	3848      	subs	r0, #72	@ 0x48
 8000e40:	9305      	str	r3, [sp, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	9304      	str	r3, [sp, #16]
 8000e46:	9603      	str	r6, [sp, #12]
 8000e48:	9502      	str	r5, [sp, #8]
 8000e4a:	9401      	str	r4, [sp, #4]
 8000e4c:	9100      	str	r1, [sp, #0]
 8000e4e:	4663      	mov	r3, ip
 8000e50:	495f      	ldr	r1, [pc, #380]	@ (8000fd0 <main+0x3ac>)
 8000e52:	f005 fdb7 	bl	80069c4 <siprintf>
				 		  strcpy(logs[numLog++], tmp);
 8000e56:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8000e5a:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	1c53      	adds	r3, r2, #1
 8000e62:	f507 419d 	add.w	r1, r7, #20096	@ 0x4e80
 8000e66:	f101 0148 	add.w	r1, r1, #72	@ 0x48
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	f507 531f 	add.w	r3, r7, #10176	@ 0x27c0
 8000e70:	f103 0310 	add.w	r3, r3, #16
 8000e74:	3b30      	subs	r3, #48	@ 0x30
 8000e76:	2164      	movs	r1, #100	@ 0x64
 8000e78:	fb01 f202 	mul.w	r2, r1, r2
 8000e7c:	441a      	add	r2, r3
 8000e7e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000e82:	3b48      	subs	r3, #72	@ 0x48
 8000e84:	4619      	mov	r1, r3
 8000e86:	4610      	mov	r0, r2
 8000e88:	f005 fe04 	bl	8006a94 <strcpy>
				  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	484c      	ldr	r0, [pc, #304]	@ (8000fc4 <main+0x3a0>)
 8000e94:	f001 fbf2 	bl	800267c <HAL_GPIO_WritePin>
				  break;
 8000e98:	e017      	b.n	8000eca <main+0x2a6>
		  for(int i = 0; i< numCard;i++){
 8000e9a:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8000e9e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000eaa:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8000eb4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8000ebe:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f6ff af5c 	blt.w	8000d82 <main+0x15e>
			  }
		  }
		  if(flag == 0){
 8000eca:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8000ece:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10f      	bne.n	8000ef8 <main+0x2d4>

			  Display("Reject");
 8000ed8:	483e      	ldr	r0, [pc, #248]	@ (8000fd4 <main+0x3b0>)
 8000eda:	f7ff fe53 	bl	8000b84 <Display>
 8000ede:	e00b      	b.n	8000ef8 <main+0x2d4>



	  }
	  else{
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee6:	4837      	ldr	r0, [pc, #220]	@ (8000fc4 <main+0x3a0>)
 8000ee8:	f001 fbc8 	bl	800267c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ef2:	4834      	ldr	r0, [pc, #208]	@ (8000fc4 <main+0x3a0>)
 8000ef4:	f001 fbc2 	bl	800267c <HAL_GPIO_WritePin>
	  }


	  if(data_receive_flag == 1){
 8000ef8:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <main+0x3b4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	f47f aeee 	bne.w	8000cde <main+0xba>
		  if(strncmp(cmdBuffer,"add ",4) == 0){
 8000f02:	2204      	movs	r2, #4
 8000f04:	4935      	ldr	r1, [pc, #212]	@ (8000fdc <main+0x3b8>)
 8000f06:	4836      	ldr	r0, [pc, #216]	@ (8000fe0 <main+0x3bc>)
 8000f08:	f005 fd86 	bl	8006a18 <strncmp>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 80c8 	bne.w	80010a4 <main+0x480>
			  char* cardIDAdd = cmdBuffer + 4;
 8000f14:	4b33      	ldr	r3, [pc, #204]	@ (8000fe4 <main+0x3c0>)
 8000f16:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000f1a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000f1e:	6013      	str	r3, [r2, #0]
			  int flag = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000f26:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000f2a:	6013      	str	r3, [r2, #0]
			  char buff[100];
			  for(int i = 0; i< numCard;i++){
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000f32:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	e065      	b.n	8001006 <main+0x3e2>
				  if(strcmp(cardList[i], cardIDAdd) == 0){ // strcmp??
 8000f3a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000f3e:	3b40      	subs	r3, #64	@ 0x40
 8000f40:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000f44:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	2164      	movs	r1, #100	@ 0x64
 8000f4c:	fb01 f202 	mul.w	r2, r1, r2
 8000f50:	4413      	add	r3, r2
 8000f52:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000f56:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000f5a:	6811      	ldr	r1, [r2, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f947 	bl	80001f0 <strcmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d143      	bne.n	8000ff0 <main+0x3cc>
					  flag = 1;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8000f6e:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8000f72:	6013      	str	r3, [r2, #0]
					  memset(buff,0,sizeof(buff));
 8000f74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f78:	3b48      	subs	r3, #72	@ 0x48
 8000f7a:	2264      	movs	r2, #100	@ 0x64
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f005 fd42 	bl	8006a08 <memset>
					  sprintf(buff,"%s","Card ID has existed\n");
 8000f84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f88:	3b48      	subs	r3, #72	@ 0x48
 8000f8a:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <main+0x3c4>)
 8000f8c:	4917      	ldr	r1, [pc, #92]	@ (8000fec <main+0x3c8>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f005 fd18 	bl	80069c4 <siprintf>
					  HAL_UART_Transmit(&huart1, buff, strlen(buff), 1000);
 8000f94:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000f98:	3b48      	subs	r3, #72	@ 0x48
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff f932 	bl	8000204 <strlen>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000fa8:	3948      	subs	r1, #72	@ 0x48
 8000faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fae:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <main+0x39c>)
 8000fb0:	f004 fd02 	bl	80059b8 <HAL_UART_Transmit>
					  break;
 8000fb4:	e033      	b.n	800101e <main+0x3fa>
 8000fb6:	bf00      	nop
 8000fb8:	20000534 	.word	0x20000534
 8000fbc:	20000630 	.word	0x20000630
 8000fc0:	2000057c 	.word	0x2000057c
 8000fc4:	40021800 	.word	0x40021800
 8000fc8:	08007390 	.word	0x08007390
 8000fcc:	0800739c 	.word	0x0800739c
 8000fd0:	080073a4 	.word	0x080073a4
 8000fd4:	080073cc 	.word	0x080073cc
 8000fd8:	200005c8 	.word	0x200005c8
 8000fdc:	080073d4 	.word	0x080073d4
 8000fe0:	200005cc 	.word	0x200005cc
 8000fe4:	200005d0 	.word	0x200005d0
 8000fe8:	080073dc 	.word	0x080073dc
 8000fec:	080073f4 	.word	0x080073f4
			  for(int i = 0; i< numCard;i++){
 8000ff0:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8000ff4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8001000:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 800100a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8001014:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	db8d      	blt.n	8000f3a <main+0x316>
				  }
			  }
			  if(flag == 0){
 800101e:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8001022:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	f040 808f 	bne.w	800114c <main+0x528>
			      strcpy(cardList[numCard++], cardIDAdd);
 800102e:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8001032:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	1c53      	adds	r3, r2, #1
 800103a:	f507 419d 	add.w	r1, r7, #20096	@ 0x4e80
 800103e:	f101 014c 	add.w	r1, r1, #76	@ 0x4c
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001048:	3b40      	subs	r3, #64	@ 0x40
 800104a:	2164      	movs	r1, #100	@ 0x64
 800104c:	fb01 f202 	mul.w	r2, r1, r2
 8001050:	4413      	add	r3, r2
 8001052:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 8001056:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f005 fd19 	bl	8006a94 <strcpy>
				  memset(buff,0,sizeof(buff));
 8001062:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001066:	3b48      	subs	r3, #72	@ 0x48
 8001068:	2264      	movs	r2, #100	@ 0x64
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f005 fccb 	bl	8006a08 <memset>
				  sprintf(buff,"%s","Add Card ID successfully!\n");
 8001072:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001076:	3b48      	subs	r3, #72	@ 0x48
 8001078:	4a36      	ldr	r2, [pc, #216]	@ (8001154 <main+0x530>)
 800107a:	4937      	ldr	r1, [pc, #220]	@ (8001158 <main+0x534>)
 800107c:	4618      	mov	r0, r3
 800107e:	f005 fca1 	bl	80069c4 <siprintf>
				  HAL_UART_Transmit(&huart1, buff, strlen(buff), 1000);
 8001082:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001086:	3b48      	subs	r3, #72	@ 0x48
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff f8bb 	bl	8000204 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001096:	3948      	subs	r1, #72	@ 0x48
 8001098:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109c:	482f      	ldr	r0, [pc, #188]	@ (800115c <main+0x538>)
 800109e:	f004 fc8b 	bl	80059b8 <HAL_UART_Transmit>
 80010a2:	e053      	b.n	800114c <main+0x528>
			  }
		  }
		  else if(strncmp(cmdBuffer,"list log",8) == 0){
 80010a4:	2208      	movs	r2, #8
 80010a6:	492e      	ldr	r1, [pc, #184]	@ (8001160 <main+0x53c>)
 80010a8:	482e      	ldr	r0, [pc, #184]	@ (8001164 <main+0x540>)
 80010aa:	f005 fcb5 	bl	8006a18 <strncmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d14b      	bne.n	800114c <main+0x528>
			  for(int i = 0; i < numLog; i++){
 80010b4:	2300      	movs	r3, #0
 80010b6:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 80010ba:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e038      	b.n	8001134 <main+0x510>
				  HAL_UART_Transmit(&huart1, logs[i], strlen(logs[i]), 1000);
 80010c2:	f507 531f 	add.w	r3, r7, #10176	@ 0x27c0
 80010c6:	f103 0310 	add.w	r3, r3, #16
 80010ca:	3b30      	subs	r3, #48	@ 0x30
 80010cc:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 80010d0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	2164      	movs	r1, #100	@ 0x64
 80010d8:	fb01 f202 	mul.w	r2, r1, r2
 80010dc:	189c      	adds	r4, r3, r2
 80010de:	f507 531f 	add.w	r3, r7, #10176	@ 0x27c0
 80010e2:	f103 0310 	add.w	r3, r3, #16
 80010e6:	3b30      	subs	r3, #48	@ 0x30
 80010e8:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 80010ec:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	2164      	movs	r1, #100	@ 0x64
 80010f4:	fb01 f202 	mul.w	r2, r1, r2
 80010f8:	4413      	add	r3, r2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff f882 	bl	8000204 <strlen>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001108:	4621      	mov	r1, r4
 800110a:	4814      	ldr	r0, [pc, #80]	@ (800115c <main+0x538>)
 800110c:	f004 fc54 	bl	80059b8 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart1, "\n", 1, 1000);
 8001110:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001114:	2201      	movs	r2, #1
 8001116:	4914      	ldr	r1, [pc, #80]	@ (8001168 <main+0x544>)
 8001118:	4810      	ldr	r0, [pc, #64]	@ (800115c <main+0x538>)
 800111a:	f004 fc4d 	bl	80059b8 <HAL_UART_Transmit>
			  for(int i = 0; i < numLog; i++){
 800111e:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8001122:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	f507 429d 	add.w	r2, r7, #20096	@ 0x4e80
 800112e:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8001138:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	f507 439d 	add.w	r3, r7, #20096	@ 0x4e80
 8001142:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbba      	blt.n	80010c2 <main+0x49e>
			  }
		  }


		  data_receive_flag = 0;
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <main+0x548>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
  {
 8001152:	e5c4      	b.n	8000cde <main+0xba>
 8001154:	080073f8 	.word	0x080073f8
 8001158:	080073f4 	.word	0x080073f4
 800115c:	2000057c 	.word	0x2000057c
 8001160:	08007414 	.word	0x08007414
 8001164:	200005cc 	.word	0x200005cc
 8001168:	08007420 	.word	0x08007420
 800116c:	200005c8 	.word	0x200005c8

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	@ 0x50
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	@ 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f005 fc42 	bl	8006a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <SystemClock_Config+0xd8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119c:	4a2a      	ldr	r2, [pc, #168]	@ (8001248 <SystemClock_Config+0xd8>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <SystemClock_Config+0xd8>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	2300      	movs	r3, #0
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <SystemClock_Config+0xdc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a24      	ldr	r2, [pc, #144]	@ (800124c <SystemClock_Config+0xdc>)
 80011ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <SystemClock_Config+0xdc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d4:	2310      	movs	r3, #16
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011dc:	2300      	movs	r3, #0
 80011de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011e0:	2308      	movs	r3, #8
 80011e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011e4:	23b4      	movs	r3, #180	@ 0xb4
 80011e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011ec:	2304      	movs	r3, #4
 80011ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 0320 	add.w	r3, r7, #32
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fdf9 	bl	8003dec <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001200:	f000 f97e 	bl	8001500 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001204:	f002 fda2 	bl	8003d4c <HAL_PWREx_EnableOverDrive>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800120e:	f000 f977 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001212:	230f      	movs	r3, #15
 8001214:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	2302      	movs	r3, #2
 8001218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001222:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001224:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001228:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	2105      	movs	r1, #5
 8001230:	4618      	mov	r0, r3
 8001232:	f003 f853 	bl	80042dc <HAL_RCC_ClockConfig>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800123c:	f000 f960 	bl	8001500 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3750      	adds	r7, #80	@ 0x50
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001254:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_I2C3_Init+0x74>)
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <MX_I2C3_Init+0x78>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <MX_I2C3_Init+0x74>)
 800125c:	4a1b      	ldr	r2, [pc, #108]	@ (80012cc <MX_I2C3_Init+0x7c>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_I2C3_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_I2C3_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <MX_I2C3_Init+0x74>)
 800126e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_I2C3_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MX_I2C3_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <MX_I2C3_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_I2C3_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	@ (80012c4 <MX_I2C3_Init+0x74>)
 800128e:	f001 fa0f 	bl	80026b0 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 f932 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129c:	2100      	movs	r1, #0
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <MX_I2C3_Init+0x74>)
 80012a0:	f002 fcd8 	bl	8003c54 <HAL_I2CEx_ConfigAnalogFilter>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80012aa:	f000 f929 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <MX_I2C3_Init+0x74>)
 80012b2:	f002 fd0b 	bl	8003ccc <HAL_I2CEx_ConfigDigitalFilter>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 f920 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000488 	.word	0x20000488
 80012c8:	40005c00 	.word	0x40005c00
 80012cc:	00061a80 	.word	0x00061a80

080012d0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_SPI4_Init+0x64>)
 80012d6:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <MX_SPI4_Init+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_SPI4_Init+0x64>)
 80012dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_SPI4_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_SPI4_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_SPI4_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_SPI4_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_SPI4_Init+0x64>)
 80012fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001300:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_SPI4_Init+0x64>)
 8001304:	2218      	movs	r2, #24
 8001306:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <MX_SPI4_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_SPI4_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <MX_SPI4_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_SPI4_Init+0x64>)
 800131c:	220a      	movs	r2, #10
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_SPI4_Init+0x64>)
 8001322:	f003 f9fb 	bl	800471c <HAL_SPI_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800132c:	f000 f8e8 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200004dc 	.word	0x200004dc
 8001338:	40013400 	.word	0x40013400

0800133c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_TIM6_Init+0x60>)
 800134c:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <MX_TIM6_Init+0x64>)
 800134e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_TIM6_Init+0x60>)
 8001352:	2259      	movs	r2, #89	@ 0x59
 8001354:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_TIM6_Init+0x60>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_TIM6_Init+0x60>)
 800135e:	2263      	movs	r2, #99	@ 0x63
 8001360:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_TIM6_Init+0x60>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_TIM6_Init+0x60>)
 800136a:	f003 ffb7 	bl	80052dc <HAL_TIM_Base_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001374:	f000 f8c4 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_TIM6_Init+0x60>)
 8001386:	f004 fa37 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f8b6 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000534 	.word	0x20000534
 80013a0:	40001000 	.word	0x40001000

080013a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013aa:	4a12      	ldr	r2, [pc, #72]	@ (80013f4 <MX_USART1_UART_Init+0x50>)
 80013ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013ca:	220c      	movs	r2, #12
 80013cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_USART1_UART_Init+0x4c>)
 80013dc:	f004 fa9c 	bl	8005918 <HAL_UART_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013e6:	f000 f88b 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2000057c 	.word	0x2000057c
 80013f4:	40011000 	.word	0x40011000

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	4b38      	ldr	r3, [pc, #224]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a37      	ldr	r2, [pc, #220]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b35      	ldr	r3, [pc, #212]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a30      	ldr	r2, [pc, #192]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b2e      	ldr	r3, [pc, #184]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a29      	ldr	r2, [pc, #164]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b23      	ldr	r3, [pc, #140]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a22      	ldr	r2, [pc, #136]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b20      	ldr	r3, [pc, #128]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a1b      	ldr	r2, [pc, #108]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_GPIO_Init+0xfc>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2110      	movs	r1, #16
 800149e:	4816      	ldr	r0, [pc, #88]	@ (80014f8 <MX_GPIO_Init+0x100>)
 80014a0:	f001 f8ec 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80014aa:	4814      	ldr	r0, [pc, #80]	@ (80014fc <MX_GPIO_Init+0x104>)
 80014ac:	f001 f8e6 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014b0:	2310      	movs	r3, #16
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <MX_GPIO_Init+0x100>)
 80014c8:	f000 ff2c 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80014cc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_GPIO_Init+0x104>)
 80014e6:	f000 ff1d 	bl	8002324 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	@ 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40021800 	.word	0x40021800

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <HAL_MspInit+0x4c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001520:	6453      	str	r3, [r2, #68]	@ 0x44
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <HAL_MspInit+0x4c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a29      	ldr	r2, [pc, #164]	@ (8001620 <HAL_I2C_MspInit+0xc4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d14b      	bne.n	8001616 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a20      	ldr	r2, [pc, #128]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015bc:	2312      	movs	r3, #18
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	2303      	movs	r3, #3
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015c8:	2304      	movs	r3, #4
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	4815      	ldr	r0, [pc, #84]	@ (8001628 <HAL_I2C_MspInit+0xcc>)
 80015d4:	f000 fea6 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015de:	2312      	movs	r3, #18
 80015e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015ea:	2304      	movs	r3, #4
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <HAL_I2C_MspInit+0xd0>)
 80015f6:	f000 fe95 	bl	8002324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 8001604:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <HAL_I2C_MspInit+0xc8>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40005c00 	.word	0x40005c00
 8001624:	40023800 	.word	0x40023800
 8001628:	40020800 	.word	0x40020800
 800162c:	40020000 	.word	0x40020000

08001630 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	@ 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a19      	ldr	r2, [pc, #100]	@ (80016b4 <HAL_SPI_MspInit+0x84>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12b      	bne.n	80016aa <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_SPI_MspInit+0x88>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_SPI_MspInit+0x88>)
 800165c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001660:	6453      	str	r3, [r2, #68]	@ 0x44
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_SPI_MspInit+0x88>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_SPI_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a10      	ldr	r2, [pc, #64]	@ (80016b8 <HAL_SPI_MspInit+0x88>)
 8001678:	f043 0310 	orr.w	r3, r3, #16
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <HAL_SPI_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0310 	and.w	r3, r3, #16
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800168a:	2364      	movs	r3, #100	@ 0x64
 800168c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800169a:	2305      	movs	r3, #5
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <HAL_SPI_MspInit+0x8c>)
 80016a6:	f000 fe3d 	bl	8002324 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40013400 	.word	0x40013400
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40021000 	.word	0x40021000

080016c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <HAL_TIM_Base_MspInit+0x48>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d115      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <HAL_TIM_Base_MspInit+0x4c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <HAL_TIM_Base_MspInit+0x4c>)
 80016dc:	f043 0310 	orr.w	r3, r3, #16
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_TIM_Base_MspInit+0x4c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2036      	movs	r0, #54	@ 0x36
 80016f4:	f000 fd4d 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016f8:	2036      	movs	r0, #54	@ 0x36
 80016fa:	f000 fd66 	bl	80021ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40001000 	.word	0x40001000
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	@ (80017a4 <HAL_UART_MspInit+0x94>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d134      	bne.n	800179c <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <HAL_UART_MspInit+0x98>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	4a1b      	ldr	r2, [pc, #108]	@ (80017a8 <HAL_UART_MspInit+0x98>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	6453      	str	r3, [r2, #68]	@ 0x44
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_UART_MspInit+0x98>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_UART_MspInit+0x98>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a14      	ldr	r2, [pc, #80]	@ (80017a8 <HAL_UART_MspInit+0x98>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_UART_MspInit+0x98>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177c:	2307      	movs	r3, #7
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4809      	ldr	r0, [pc, #36]	@ (80017ac <HAL_UART_MspInit+0x9c>)
 8001788:	f000 fdcc 	bl	8002324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	2025      	movs	r0, #37	@ 0x25
 8001792:	f000 fcfe 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001796:	2025      	movs	r0, #37	@ 0x25
 8001798:	f000 fd17 	bl	80021ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800179c:	bf00      	nop
 800179e:	3728      	adds	r7, #40	@ 0x28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000

080017b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <NMI_Handler+0x4>

080017b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <MemManage_Handler+0x4>

080017c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001806:	f000 fba5 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <USART1_IRQHandler+0x10>)
 8001816:	f004 f97f 	bl	8005b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000057c 	.word	0x2000057c

08001824 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	time6_count++;
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <TIM6_DAC_IRQHandler+0x18>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3301      	adds	r3, #1
 800182e:	4a03      	ldr	r2, [pc, #12]	@ (800183c <TIM6_DAC_IRQHandler+0x18>)
 8001830:	6013      	str	r3, [r2, #0]
//		DisplayTime(time1);
//		time6_count = 0;
//	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001832:	4803      	ldr	r0, [pc, #12]	@ (8001840 <TIM6_DAC_IRQHandler+0x1c>)
 8001834:	f003 fe12 	bl	800545c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200005c4 	.word	0x200005c4
 8001840:	20000534 	.word	0x20000534

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f005 f8e2 	bl	8006a3c <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20030000 	.word	0x20030000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000638 	.word	0x20000638
 80018ac:	20000788 	.word	0x20000788

080018b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <TM_MFRC522_Init>:
 */
#include "tm_stm32f4_mfrc522.h"

extern SPI_HandleTypeDef hspi4;

void TM_MFRC522_Init(void) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	TM_MFRC522_InitPins();
 80018d8:	f000 f83c 	bl	8001954 <TM_MFRC522_InitPins>
	//TM_SPI_Init(MFRC522_SPI, MFRC522_SPI_PINSPACK);

	TM_MFRC522_Reset();
 80018dc:	f000 f921 	bl	8001b22 <TM_MFRC522_Reset>

	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80018e0:	218d      	movs	r1, #141	@ 0x8d
 80018e2:	202a      	movs	r0, #42	@ 0x2a
 80018e4:	f000 f842 	bl	800196c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80018e8:	213e      	movs	r1, #62	@ 0x3e
 80018ea:	202b      	movs	r0, #43	@ 0x2b
 80018ec:	f000 f83e 	bl	800196c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 80018f0:	211e      	movs	r1, #30
 80018f2:	202d      	movs	r0, #45	@ 0x2d
 80018f4:	f000 f83a 	bl	800196c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80018f8:	2100      	movs	r1, #0
 80018fa:	202c      	movs	r0, #44	@ 0x2c
 80018fc:	f000 f836 	bl	800196c <TM_MFRC522_WriteRegister>

	/* 48dB gain */
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 8001900:	2170      	movs	r1, #112	@ 0x70
 8001902:	2026      	movs	r0, #38	@ 0x26
 8001904:	f000 f832 	bl	800196c <TM_MFRC522_WriteRegister>
	
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 8001908:	2140      	movs	r1, #64	@ 0x40
 800190a:	2015      	movs	r0, #21
 800190c:	f000 f82e 	bl	800196c <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8001910:	213d      	movs	r1, #61	@ 0x3d
 8001912:	2011      	movs	r0, #17
 8001914:	f000 f82a 	bl	800196c <TM_MFRC522_WriteRegister>

	TM_MFRC522_AntennaOn();		//Open the antenna
 8001918:	f000 f8ee 	bl	8001af8 <TM_MFRC522_AntennaOn>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <TM_MFRC522_Check>:

TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	//Find cards, return card type
	status = TM_MFRC522_Request(PICC_REQIDL, id);	
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	2026      	movs	r0, #38	@ 0x26
 800192c:	f000 f901 	bl	8001b32 <TM_MFRC522_Request>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d104      	bne.n	8001944 <TM_MFRC522_Check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = TM_MFRC522_Anticoll(id);	
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f9ed 	bl	8001d1a <TM_MFRC522_Anticoll>
 8001940:	4603      	mov	r3, r0
 8001942:	73fb      	strb	r3, [r7, #15]
	}
	TM_MFRC522_Halt();			//Command card into hibernation 
 8001944:	f000 fa6f 	bl	8001e26 <TM_MFRC522_Halt>

	return status;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <TM_MFRC522_InitPins>:
		}
	}
	return MI_OK;
}

void TM_MFRC522_InitPins(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
//	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	//CS pin
//	GPIO_InitStruct.GPIO_Pin = MFRC522_CS_PIN;
//	GPIO_Init(MFRC522_CS_PORT, &GPIO_InitStruct);

	MFRC522_CS_HIGH;
 8001958:	2201      	movs	r2, #1
 800195a:	2110      	movs	r1, #16
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <TM_MFRC522_InitPins+0x14>)
 800195e:	f000 fe8d 	bl	800267c <HAL_GPIO_WritePin>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000

0800196c <TM_MFRC522_WriteRegister>:

void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	4613      	mov	r3, r2
 800197a:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 800197c:	2200      	movs	r2, #0
 800197e:	2110      	movs	r1, #16
 8001980:	481a      	ldr	r0, [pc, #104]	@ (80019ec <TM_MFRC522_WriteRegister+0x80>)
 8001982:	f000 fe7b 	bl	800267c <HAL_GPIO_WritePin>
	//Send address
	uint8_t buf = (addr << 1) & 0x7E;
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001990:	b2db      	uxtb	r3, r3
 8001992:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef ret = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001998:	f107 010e 	add.w	r1, r7, #14
 800199c:	230a      	movs	r3, #10
 800199e:	2201      	movs	r2, #1
 80019a0:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <TM_MFRC522_WriteRegister+0x84>)
 80019a2:	f002 ff44 	bl	800482e <HAL_SPI_Transmit>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80019aa:	bf00      	nop
 80019ac:	4810      	ldr	r0, [pc, #64]	@ (80019f0 <TM_MFRC522_WriteRegister+0x84>)
 80019ae:	f003 fb44 	bl	800503a <HAL_SPI_GetState>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d0f7      	beq.n	80019ac <TM_MFRC522_WriteRegister+0x40>
	//Send data	
	HAL_SPI_Transmit(&hspi4, &val, 1, 10);
 80019bc:	1db9      	adds	r1, r7, #6
 80019be:	230a      	movs	r3, #10
 80019c0:	2201      	movs	r2, #1
 80019c2:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <TM_MFRC522_WriteRegister+0x84>)
 80019c4:	f002 ff33 	bl	800482e <HAL_SPI_Transmit>
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 80019c8:	bf00      	nop
 80019ca:	4809      	ldr	r0, [pc, #36]	@ (80019f0 <TM_MFRC522_WriteRegister+0x84>)
 80019cc:	f003 fb35 	bl	800503a <HAL_SPI_GetState>
 80019d0:	4603      	mov	r3, r0
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d0f7      	beq.n	80019ca <TM_MFRC522_WriteRegister+0x5e>
	//CS high
	MFRC522_CS_HIGH;
 80019da:	2201      	movs	r2, #1
 80019dc:	2110      	movs	r1, #16
 80019de:	4803      	ldr	r0, [pc, #12]	@ (80019ec <TM_MFRC522_WriteRegister+0x80>)
 80019e0:	f000 fe4c 	bl	800267c <HAL_GPIO_WritePin>
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	200004dc 	.word	0x200004dc

080019f4 <TM_MFRC522_ReadRegister>:

uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 80019fe:	2200      	movs	r2, #0
 8001a00:	2110      	movs	r1, #16
 8001a02:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <TM_MFRC522_ReadRegister+0x8c>)
 8001a04:	f000 fe3a 	bl	800267c <HAL_GPIO_WritePin>

	uint8_t buf = ((addr << 1) & 0x7E) | 0x80;
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi4, &buf, 1, 10);
 8001a24:	f107 010d 	add.w	r1, r7, #13
 8001a28:	230a      	movs	r3, #10
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4815      	ldr	r0, [pc, #84]	@ (8001a84 <TM_MFRC522_ReadRegister+0x90>)
 8001a2e:	f002 fefe 	bl	800482e <HAL_SPI_Transmit>
 8001a32:	4603      	mov	r3, r0
 8001a34:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001a36:	bf00      	nop
 8001a38:	4812      	ldr	r0, [pc, #72]	@ (8001a84 <TM_MFRC522_ReadRegister+0x90>)
 8001a3a:	f003 fafe 	bl	800503a <HAL_SPI_GetState>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	73fb      	strb	r3, [r7, #15]
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d0f7      	beq.n	8001a38 <TM_MFRC522_ReadRegister+0x44>
	ret = HAL_SPI_Receive(&hspi4, &val, 1, 10);
 8001a48:	f107 010e 	add.w	r1, r7, #14
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	2201      	movs	r2, #1
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <TM_MFRC522_ReadRegister+0x90>)
 8001a52:	f003 f830 	bl	8004ab6 <HAL_SPI_Receive>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
	while ((ret = HAL_SPI_GetState(&hspi4)) == HAL_SPI_STATE_BUSY);
 8001a5a:	bf00      	nop
 8001a5c:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <TM_MFRC522_ReadRegister+0x90>)
 8001a5e:	f003 faec 	bl	800503a <HAL_SPI_GetState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d0f7      	beq.n	8001a5c <TM_MFRC522_ReadRegister+0x68>
	//CS high
	MFRC522_CS_HIGH;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <TM_MFRC522_ReadRegister+0x8c>)
 8001a72:	f000 fe03 	bl	800267c <HAL_GPIO_WritePin>

	return val;	
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	200004dc 	.word	0x200004dc

08001a88 <TM_MFRC522_SetBitMask>:

void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460a      	mov	r2, r1
 8001a92:	71fb      	strb	r3, [r7, #7]
 8001a94:	4613      	mov	r3, r2
 8001a96:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ffaa 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	79bb      	ldrb	r3, [r7, #6]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff5c 	bl	800196c <TM_MFRC522_WriteRegister>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <TM_MFRC522_ClearBitMask>:

void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	71fb      	strb	r3, [r7, #7]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	71bb      	strb	r3, [r7, #6]
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff90 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff3e 	bl	800196c <TM_MFRC522_WriteRegister>
} 
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <TM_MFRC522_AntennaOn>:

void TM_MFRC522_AntennaOn(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8001afe:	2014      	movs	r0, #20
 8001b00:	f7ff ff78 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <TM_MFRC522_AntennaOn+0x22>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001b12:	2103      	movs	r1, #3
 8001b14:	2014      	movs	r0, #20
 8001b16:	f7ff ffb7 	bl	8001a88 <TM_MFRC522_SetBitMask>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <TM_MFRC522_Reset>:

void TM_MFRC522_AntennaOff(void) {
	TM_MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void TM_MFRC522_Reset(void) {
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8001b26:	210f      	movs	r1, #15
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f7ff ff1f 	bl	800196c <TM_MFRC522_WriteRegister>
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <TM_MFRC522_Request>:

TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af02      	add	r7, sp, #8
 8001b38:	4603      	mov	r3, r0
 8001b3a:	6039      	str	r1, [r7, #0]
 8001b3c:	71fb      	strb	r3, [r7, #7]
	TM_MFRC522_Status_t status;  
	uint16_t backBits;			//The received data bits

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001b3e:	2107      	movs	r1, #7
 8001b40:	200d      	movs	r0, #13
 8001b42:	f7ff ff13 	bl	800196c <TM_MFRC522_WriteRegister>

	TagType[0] = reqMode;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	200c      	movs	r0, #12
 8001b5a:	f000 f80f 	bl	8001b7c <TM_MFRC522_ToCard>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10)) {    
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <TM_MFRC522_Request+0x3c>
 8001b68:	89bb      	ldrh	r3, [r7, #12]
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d001      	beq.n	8001b72 <TM_MFRC522_Request+0x40>
		status = MI_ERR;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <TM_MFRC522_ToCard>:

TM_MFRC522_Status_t TM_MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	73bb      	strb	r3, [r7, #14]
	TM_MFRC522_Status_t status = MI_ERR;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d006      	beq.n	8001bae <TM_MFRC522_ToCard+0x32>
 8001ba0:	2b0e      	cmp	r3, #14
 8001ba2:	d109      	bne.n	8001bb8 <TM_MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 8001ba8:	2310      	movs	r3, #16
 8001baa:	757b      	strb	r3, [r7, #21]
			break;
 8001bac:	e005      	b.n	8001bba <TM_MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8001bae:	2377      	movs	r3, #119	@ 0x77
 8001bb0:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8001bb2:	2330      	movs	r3, #48	@ 0x30
 8001bb4:	757b      	strb	r3, [r7, #21]
			break;
 8001bb6:	e000      	b.n	8001bba <TM_MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001bb8:	bf00      	nop
	}

	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8001bba:	7dbb      	ldrb	r3, [r7, #22]
 8001bbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7ff fed1 	bl	800196c <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	2004      	movs	r0, #4
 8001bce:	f7ff ff75 	bl	8001abc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001bd2:	2180      	movs	r1, #128	@ 0x80
 8001bd4:	200a      	movs	r0, #10
 8001bd6:	f7ff ff57 	bl	8001a88 <TM_MFRC522_SetBitMask>

	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff fec5 	bl	800196c <TM_MFRC522_WriteRegister>

	//Writing data to the FIFO
	for (i = 0; i < sendLen; i++) {   
 8001be2:	2300      	movs	r3, #0
 8001be4:	827b      	strh	r3, [r7, #18]
 8001be6:	e00a      	b.n	8001bfe <TM_MFRC522_ToCard+0x82>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);    
 8001be8:	8a7b      	ldrh	r3, [r7, #18]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	2009      	movs	r0, #9
 8001bf4:	f7ff feba 	bl	800196c <TM_MFRC522_WriteRegister>
	for (i = 0; i < sendLen; i++) {   
 8001bf8:	8a7b      	ldrh	r3, [r7, #18]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	827b      	strh	r3, [r7, #18]
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8a7a      	ldrh	r2, [r7, #18]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3ef      	bcc.n	8001be8 <TM_MFRC522_ToCard+0x6c>
	}

	//Execute the command
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff fead 	bl	800196c <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {    
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d103      	bne.n	8001c20 <TM_MFRC522_ToCard+0xa4>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts  
 8001c18:	2180      	movs	r1, #128	@ 0x80
 8001c1a:	200d      	movs	r0, #13
 8001c1c:	f7ff ff34 	bl	8001a88 <TM_MFRC522_SetBitMask>
	}   

	//Waiting to receive data to complete
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8001c20:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001c24:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 8001c26:	2004      	movs	r0, #4
 8001c28:	f7ff fee4 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	753b      	strb	r3, [r7, #20]
		i--;
 8001c30:	8a7b      	ldrh	r3, [r7, #18]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001c36:	8a7b      	ldrh	r3, [r7, #18]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <TM_MFRC522_ToCard+0xd6>
 8001c3c:	7d3b      	ldrb	r3, [r7, #20]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d105      	bne.n	8001c52 <TM_MFRC522_ToCard+0xd6>
 8001c46:	7d3a      	ldrb	r2, [r7, #20]
 8001c48:	7d7b      	ldrb	r3, [r7, #21]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0e9      	beq.n	8001c26 <TM_MFRC522_ToCard+0xaa>

	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	200d      	movs	r0, #13
 8001c56:	f7ff ff31 	bl	8001abc <TM_MFRC522_ClearBitMask>

	if (i != 0)  {
 8001c5a:	8a7b      	ldrh	r3, [r7, #18]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d057      	beq.n	8001d10 <TM_MFRC522_ToCard+0x194>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001c60:	2006      	movs	r0, #6
 8001c62:	f7ff fec7 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f003 031b 	and.w	r3, r3, #27
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d14d      	bne.n	8001d0c <TM_MFRC522_ToCard+0x190>
			status = MI_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {   
 8001c74:	7d3a      	ldrb	r2, [r7, #20]
 8001c76:	7dbb      	ldrb	r3, [r7, #22]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <TM_MFRC522_ToCard+0x10c>
				status = MI_NOTAGERR;			
 8001c84:	2301      	movs	r3, #1
 8001c86:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d140      	bne.n	8001d10 <TM_MFRC522_ToCard+0x194>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f7ff feb0 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001c94:	4603      	mov	r3, r0
 8001c96:	753b      	strb	r3, [r7, #20]
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 8001c98:	200c      	movs	r0, #12
 8001c9a:	f7ff feab 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	747b      	strb	r3, [r7, #17]
				if (lastBits) {   
 8001ca6:	7c7b      	ldrb	r3, [r7, #17]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <TM_MFRC522_ToCard+0x148>
					*backLen = (n - 1) * 8 + lastBits;   
 8001cac:	7d3b      	ldrb	r3, [r7, #20]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	7c7b      	ldrb	r3, [r7, #17]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	e005      	b.n	8001cd0 <TM_MFRC522_ToCard+0x154>
				} else {   
					*backLen = n * 8;   
 8001cc4:	7d3b      	ldrb	r3, [r7, #20]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cce:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {   
 8001cd0:	7d3b      	ldrb	r3, [r7, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <TM_MFRC522_ToCard+0x15e>
					n = 1;    
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {   
 8001cda:	7d3b      	ldrb	r3, [r7, #20]
 8001cdc:	2b10      	cmp	r3, #16
 8001cde:	d901      	bls.n	8001ce4 <TM_MFRC522_ToCard+0x168>
					n = MFRC522_MAX_LEN;   
 8001ce0:	2310      	movs	r3, #16
 8001ce2:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {   
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	827b      	strh	r3, [r7, #18]
 8001ce8:	e00a      	b.n	8001d00 <TM_MFRC522_ToCard+0x184>
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);    
 8001cea:	8a7b      	ldrh	r3, [r7, #18]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	18d4      	adds	r4, r2, r3
 8001cf0:	2009      	movs	r0, #9
 8001cf2:	f7ff fe7f 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {   
 8001cfa:	8a7b      	ldrh	r3, [r7, #18]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	827b      	strh	r3, [r7, #18]
 8001d00:	7d3b      	ldrb	r3, [r7, #20]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	8a7a      	ldrh	r2, [r7, #18]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d3ef      	bcc.n	8001cea <TM_MFRC522_ToCard+0x16e>
 8001d0a:	e001      	b.n	8001d10 <TM_MFRC522_ToCard+0x194>
				}
			}
		} else {   
			status = MI_ERR;  
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}

08001d1a <TM_MFRC522_Anticoll>:

TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af02      	add	r7, sp, #8
 8001d20:	6078      	str	r0, [r7, #4]
	TM_MFRC522_Status_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001d26:	2100      	movs	r1, #0
 8001d28:	200d      	movs	r0, #13
 8001d2a:	f7ff fe1f 	bl	800196c <TM_MFRC522_WriteRegister>

	serNum[0] = PICC_ANTICOLL;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2293      	movs	r2, #147	@ 0x93
 8001d32:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3301      	adds	r3, #1
 8001d38:	2220      	movs	r2, #32
 8001d3a:	701a      	strb	r2, [r3, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001d3c:	f107 030a 	add.w	r3, r7, #10
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2202      	movs	r2, #2
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	200c      	movs	r0, #12
 8001d4a:	f7ff ff17 	bl	8001b7c <TM_MFRC522_ToCard>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d118      	bne.n	8001d8a <TM_MFRC522_Anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {   
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73bb      	strb	r3, [r7, #14]
 8001d5c:	e009      	b.n	8001d72 <TM_MFRC522_Anticoll+0x58>
			serNumCheck ^= serNum[i];
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	7b7b      	ldrb	r3, [r7, #13]
 8001d68:	4053      	eors	r3, r2
 8001d6a:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {   
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	73bb      	strb	r3, [r7, #14]
 8001d72:	7bbb      	ldrb	r3, [r7, #14]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9f2      	bls.n	8001d5e <TM_MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i]) {   
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	7b7a      	ldrb	r2, [r7, #13]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <TM_MFRC522_Anticoll+0x70>
			status = MI_ERR;    
 8001d86:	2302      	movs	r3, #2
 8001d88:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <TM_MFRC522_CalculateCRC>:

void TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);				//CRCIrq = 0
 8001da2:	2104      	movs	r1, #4
 8001da4:	2005      	movs	r0, #5
 8001da6:	f7ff fe89 	bl	8001abc <TM_MFRC522_ClearBitMask>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	200a      	movs	r0, #10
 8001dae:	f7ff fe6b 	bl	8001a88 <TM_MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO	
	for (i = 0; i < len; i++) {   
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
 8001db6:	e00a      	b.n	8001dce <TM_MFRC522_CalculateCRC+0x3a>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));   
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2009      	movs	r0, #9
 8001dc4:	f7ff fdd2 	bl	800196c <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {   
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
 8001dce:	7dfa      	ldrb	r2, [r7, #23]
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d3f0      	bcc.n	8001db8 <TM_MFRC522_CalculateCRC+0x24>
	}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff fdc7 	bl	800196c <TM_MFRC522_WriteRegister>

	//Wait CRC calculation is complete
	i = 0xFF;
 8001dde:	23ff      	movs	r3, #255	@ 0xff
 8001de0:	75fb      	strb	r3, [r7, #23]
	do {
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8001de2:	2005      	movs	r0, #5
 8001de4:	f7ff fe06 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001de8:	4603      	mov	r3, r0
 8001dea:	75bb      	strb	r3, [r7, #22]
		i--;
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <TM_MFRC522_CalculateCRC+0x6e>
 8001df8:	7dbb      	ldrb	r3, [r7, #22]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ef      	beq.n	8001de2 <TM_MFRC522_CalculateCRC+0x4e>

	//Read CRC calculation result
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001e02:	2022      	movs	r0, #34	@ 0x22
 8001e04:	f7ff fdf6 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	701a      	strb	r2, [r3, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	1c5c      	adds	r4, r3, #1
 8001e14:	2021      	movs	r0, #33	@ 0x21
 8001e16:	f7ff fded 	bl	80019f4 <TM_MFRC522_ReadRegister>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	7023      	strb	r3, [r4, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	371c      	adds	r7, #28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd90      	pop	{r4, r7, pc}

08001e26 <TM_MFRC522_Halt>:
	}

	return status;
}

void TM_MFRC522_Halt(void) {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8001e2c:	2350      	movs	r3, #80	@ 0x50
 8001e2e:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	707b      	strb	r3, [r7, #1]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001e34:	463b      	mov	r3, r7
 8001e36:	1c9a      	adds	r2, r3, #2
 8001e38:	463b      	mov	r3, r7
 8001e3a:	2102      	movs	r1, #2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ffa9 	bl	8001d94 <TM_MFRC522_CalculateCRC>

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001e42:	463a      	mov	r2, r7
 8001e44:	4639      	mov	r1, r7
 8001e46:	1dbb      	adds	r3, r7, #6
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	200c      	movs	r0, #12
 8001e50:	f7ff fe94 	bl	8001b7c <TM_MFRC522_ToCard>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e94 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e60:	f7ff fd26 	bl	80018b0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e64:	480c      	ldr	r0, [pc, #48]	@ (8001e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e66:	490d      	ldr	r1, [pc, #52]	@ (8001e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e6c:	e002      	b.n	8001e74 <LoopCopyDataInit>

08001e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e72:	3304      	adds	r3, #4

08001e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e78:	d3f9      	bcc.n	8001e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e80:	e001      	b.n	8001e86 <LoopFillZerobss>

08001e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e84:	3204      	adds	r2, #4

08001e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e88:	d3fb      	bcc.n	8001e82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e8a:	f004 fddd 	bl	8006a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8e:	f7fe fec9 	bl	8000c24 <main>
  bx  lr    
 8001e92:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e94:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e9c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ea0:	080081dc 	.word	0x080081dc
  ldr r2, =_sbss
 8001ea4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001ea8:	20000788 	.word	0x20000788

08001eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eac:	e7fe      	b.n	8001eac <ADC_IRQHandler>
	...

08001eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef0 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <HAL_Init+0x40>)
 8001eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <HAL_Init+0x40>)
 8001ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	@ (8001ef0 <HAL_Init+0x40>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 f94f 	bl	800217c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fb12 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023c00 	.word	0x40023c00

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f967 	bl	80021e6 <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 f92f 	bl	8002192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	@ (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	20000010 	.word	0x20000010
 8001f50:	2000000c 	.word	0x2000000c

08001f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_IncTick+0x20>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_IncTick+0x24>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <HAL_IncTick+0x24>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000010 	.word	0x20000010
 8001f78:	2000063c 	.word	0x2000063c

08001f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <HAL_GetTick+0x14>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000063c 	.word	0x2000063c

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff ffee 	bl	8001f7c <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d005      	beq.n	8001fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_Delay+0x44>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fba:	bf00      	nop
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d8f7      	bhi.n	8001fbc <HAL_Delay+0x28>
  {
  }
}
 8001fcc:	bf00      	nop
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000010 	.word	0x20000010

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	@ (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	@ (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	@ (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002148:	d301      	bcc.n	800214e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214a:	2301      	movs	r3, #1
 800214c:	e00f      	b.n	800216e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <SysTick_Config+0x40>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002156:	210f      	movs	r1, #15
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f7ff ff8e 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <SysTick_Config+0x40>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <SysTick_Config+0x40>)
 8002168:	2207      	movs	r2, #7
 800216a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff29 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a4:	f7ff ff3e 	bl	8002024 <__NVIC_GetPriorityGrouping>
 80021a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff ff8e 	bl	80020d0 <NVIC_EncodePriority>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff5d 	bl	800207c <__NVIC_SetPriority>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff31 	bl	8002040 <__NVIC_EnableIRQ>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffa2 	bl	8002138 <SysTick_Config>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff feb6 	bl	8001f7c <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d008      	beq.n	8002230 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2280      	movs	r2, #128	@ 0x80
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e052      	b.n	80022d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0216 	bic.w	r2, r2, #22
 800223e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800224e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <HAL_DMA_Abort+0x62>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0208 	bic.w	r2, r2, #8
 800226e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0201 	bic.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002280:	e013      	b.n	80022aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002282:	f7ff fe7b 	bl	8001f7c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b05      	cmp	r3, #5
 800228e:	d90c      	bls.n	80022aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2203      	movs	r2, #3
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e015      	b.n	80022d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e4      	bne.n	8002282 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	223f      	movs	r2, #63	@ 0x3f
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d004      	beq.n	80022fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2280      	movs	r2, #128	@ 0x80
 80022f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e00c      	b.n	8002316 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2205      	movs	r2, #5
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e177      	b.n	8002630 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8166 	bne.w	800262a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	2b02      	cmp	r3, #2
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d017      	beq.n	8002414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80c0 	beq.w	800262a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b66      	ldr	r3, [pc, #408]	@ (8002648 <HAL_GPIO_Init+0x324>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	4a65      	ldr	r2, [pc, #404]	@ (8002648 <HAL_GPIO_Init+0x324>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ba:	4b63      	ldr	r3, [pc, #396]	@ (8002648 <HAL_GPIO_Init+0x324>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a61      	ldr	r2, [pc, #388]	@ (800264c <HAL_GPIO_Init+0x328>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a58      	ldr	r2, [pc, #352]	@ (8002650 <HAL_GPIO_Init+0x32c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d037      	beq.n	8002562 <HAL_GPIO_Init+0x23e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a57      	ldr	r2, [pc, #348]	@ (8002654 <HAL_GPIO_Init+0x330>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d031      	beq.n	800255e <HAL_GPIO_Init+0x23a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a56      	ldr	r2, [pc, #344]	@ (8002658 <HAL_GPIO_Init+0x334>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02b      	beq.n	800255a <HAL_GPIO_Init+0x236>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a55      	ldr	r2, [pc, #340]	@ (800265c <HAL_GPIO_Init+0x338>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d025      	beq.n	8002556 <HAL_GPIO_Init+0x232>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a54      	ldr	r2, [pc, #336]	@ (8002660 <HAL_GPIO_Init+0x33c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01f      	beq.n	8002552 <HAL_GPIO_Init+0x22e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a53      	ldr	r2, [pc, #332]	@ (8002664 <HAL_GPIO_Init+0x340>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d019      	beq.n	800254e <HAL_GPIO_Init+0x22a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a52      	ldr	r2, [pc, #328]	@ (8002668 <HAL_GPIO_Init+0x344>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <HAL_GPIO_Init+0x226>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a51      	ldr	r2, [pc, #324]	@ (800266c <HAL_GPIO_Init+0x348>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00d      	beq.n	8002546 <HAL_GPIO_Init+0x222>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a50      	ldr	r2, [pc, #320]	@ (8002670 <HAL_GPIO_Init+0x34c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x21e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a4f      	ldr	r2, [pc, #316]	@ (8002674 <HAL_GPIO_Init+0x350>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d101      	bne.n	800253e <HAL_GPIO_Init+0x21a>
 800253a:	2309      	movs	r3, #9
 800253c:	e012      	b.n	8002564 <HAL_GPIO_Init+0x240>
 800253e:	230a      	movs	r3, #10
 8002540:	e010      	b.n	8002564 <HAL_GPIO_Init+0x240>
 8002542:	2308      	movs	r3, #8
 8002544:	e00e      	b.n	8002564 <HAL_GPIO_Init+0x240>
 8002546:	2307      	movs	r3, #7
 8002548:	e00c      	b.n	8002564 <HAL_GPIO_Init+0x240>
 800254a:	2306      	movs	r3, #6
 800254c:	e00a      	b.n	8002564 <HAL_GPIO_Init+0x240>
 800254e:	2305      	movs	r3, #5
 8002550:	e008      	b.n	8002564 <HAL_GPIO_Init+0x240>
 8002552:	2304      	movs	r3, #4
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x240>
 8002556:	2303      	movs	r3, #3
 8002558:	e004      	b.n	8002564 <HAL_GPIO_Init+0x240>
 800255a:	2302      	movs	r3, #2
 800255c:	e002      	b.n	8002564 <HAL_GPIO_Init+0x240>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_GPIO_Init+0x240>
 8002562:	2300      	movs	r3, #0
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	f002 0203 	and.w	r2, r2, #3
 800256a:	0092      	lsls	r2, r2, #2
 800256c:	4093      	lsls	r3, r2
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002574:	4935      	ldr	r1, [pc, #212]	@ (800264c <HAL_GPIO_Init+0x328>)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3302      	adds	r3, #2
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002582:	4b3d      	ldr	r3, [pc, #244]	@ (8002678 <HAL_GPIO_Init+0x354>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a6:	4a34      	ldr	r2, [pc, #208]	@ (8002678 <HAL_GPIO_Init+0x354>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ac:	4b32      	ldr	r3, [pc, #200]	@ (8002678 <HAL_GPIO_Init+0x354>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d0:	4a29      	ldr	r2, [pc, #164]	@ (8002678 <HAL_GPIO_Init+0x354>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <HAL_GPIO_Init+0x354>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	43db      	mvns	r3, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4013      	ands	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002678 <HAL_GPIO_Init+0x354>)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002600:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_GPIO_Init+0x354>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002624:	4a14      	ldr	r2, [pc, #80]	@ (8002678 <HAL_GPIO_Init+0x354>)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3301      	adds	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	f67f ae84 	bls.w	8002340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3724      	adds	r7, #36	@ 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40013800 	.word	0x40013800
 8002650:	40020000 	.word	0x40020000
 8002654:	40020400 	.word	0x40020400
 8002658:	40020800 	.word	0x40020800
 800265c:	40020c00 	.word	0x40020c00
 8002660:	40021000 	.word	0x40021000
 8002664:	40021400 	.word	0x40021400
 8002668:	40021800 	.word	0x40021800
 800266c:	40021c00 	.word	0x40021c00
 8002670:	40022000 	.word	0x40022000
 8002674:	40022400 	.word	0x40022400
 8002678:	40013c00 	.word	0x40013c00

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002698:	e003      	b.n	80026a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	041a      	lsls	r2, r3, #16
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	619a      	str	r2, [r3, #24]
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e12b      	b.n	800291a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe ff40 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	@ 0x24
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002714:	f001 ffda 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8002718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a81      	ldr	r2, [pc, #516]	@ (8002924 <HAL_I2C_Init+0x274>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d807      	bhi.n	8002734 <HAL_I2C_Init+0x84>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a80      	ldr	r2, [pc, #512]	@ (8002928 <HAL_I2C_Init+0x278>)
 8002728:	4293      	cmp	r3, r2
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e006      	b.n	8002742 <HAL_I2C_Init+0x92>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a7d      	ldr	r2, [pc, #500]	@ (800292c <HAL_I2C_Init+0x27c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	bf94      	ite	ls
 800273c:	2301      	movls	r3, #1
 800273e:	2300      	movhi	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0e7      	b.n	800291a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a78      	ldr	r2, [pc, #480]	@ (8002930 <HAL_I2C_Init+0x280>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a6a      	ldr	r2, [pc, #424]	@ (8002924 <HAL_I2C_Init+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d802      	bhi.n	8002784 <HAL_I2C_Init+0xd4>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3301      	adds	r3, #1
 8002782:	e009      	b.n	8002798 <HAL_I2C_Init+0xe8>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	4a69      	ldr	r2, [pc, #420]	@ (8002934 <HAL_I2C_Init+0x284>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	3301      	adds	r3, #1
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	495c      	ldr	r1, [pc, #368]	@ (8002924 <HAL_I2C_Init+0x274>)
 80027b4:	428b      	cmp	r3, r1
 80027b6:	d819      	bhi.n	80027ec <HAL_I2C_Init+0x13c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e59      	subs	r1, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027cc:	400b      	ands	r3, r1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_I2C_Init+0x138>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e59      	subs	r1, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e6:	e051      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e04f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <HAL_I2C_Init+0x168>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	440b      	add	r3, r1
 8002802:	fbb0 f3f3 	udiv	r3, r0, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e012      	b.n	800283e <HAL_I2C_Init+0x18e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	0099      	lsls	r1, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Init+0x196>
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_I2C_Init+0x1dc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10e      	bne.n	800286c <HAL_I2C_Init+0x1bc>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1e58      	subs	r0, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	440b      	add	r3, r1
 800285c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002860:	3301      	adds	r3, #1
 8002862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800286a:	e00f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e58      	subs	r0, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	0099      	lsls	r1, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	6809      	ldr	r1, [r1, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6911      	ldr	r1, [r2, #16]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68d2      	ldr	r2, [r2, #12]
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	000186a0 	.word	0x000186a0
 8002928:	001e847f 	.word	0x001e847f
 800292c:	003d08ff 	.word	0x003d08ff
 8002930:	431bde83 	.word	0x431bde83
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	460b      	mov	r3, r1
 8002946:	817b      	strh	r3, [r7, #10]
 8002948:	4613      	mov	r3, r2
 800294a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff fb16 	bl	8001f7c <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 80e0 	bne.w	8002b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2319      	movs	r3, #25
 8002966:	2201      	movs	r2, #1
 8002968:	4970      	ldr	r1, [pc, #448]	@ (8002b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 ff3c 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	e0d3      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_I2C_Master_Transmit+0x50>
 8002984:	2302      	movs	r3, #2
 8002986:	e0cc      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d007      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2221      	movs	r2, #33	@ 0x21
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2210      	movs	r2, #16
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	893a      	ldrh	r2, [r7, #8]
 80029de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a50      	ldr	r2, [pc, #320]	@ (8002b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 fcf6 	bl	80033e8 <I2C_MasterRequestWrite>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08d      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a1c:	e066      	b.n	8002aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fffa 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d107      	bne.n	8002a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06b      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d11b      	bne.n	8002ac0 <HAL_I2C_Master_Transmit+0x188>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d017      	beq.n	8002ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	6a39      	ldr	r1, [r7, #32]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fff1 	bl	8003aac <I2C_WaitOnBTFFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d107      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e01a      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d194      	bne.n	8002a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	00100002 	.word	0x00100002
 8002b30:	ffff0000 	.word	0xffff0000

08002b34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7ff fa15 	bl	8001f7c <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	f040 80d9 	bne.w	8002d14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2319      	movs	r3, #25
 8002b68:	2201      	movs	r2, #1
 8002b6a:	496d      	ldr	r1, [pc, #436]	@ (8002d20 <HAL_I2C_Mem_Write+0x1ec>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fe3b 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0cc      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Mem_Write+0x56>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0c5      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d007      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	@ 0x21
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a4d      	ldr	r2, [pc, #308]	@ (8002d24 <HAL_I2C_Mem_Write+0x1f0>)
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf2:	88f8      	ldrh	r0, [r7, #6]
 8002bf4:	893a      	ldrh	r2, [r7, #8]
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4603      	mov	r3, r0
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fc72 	bl	80034ec <I2C_RequestMemoryWrite>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d052      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e081      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 ff00 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1aa      	bne.n	8002c12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fef3 	bl	8003aac <I2C_WaitOnBTFFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e016      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08c      	sub	sp, #48	@ 0x30
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d42:	f7ff f91b 	bl	8001f7c <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b20      	cmp	r3, #32
 8002d52:	f040 8214 	bne.w	800317e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2319      	movs	r3, #25
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	497b      	ldr	r1, [pc, #492]	@ (8002f4c <HAL_I2C_Mem_Read+0x224>)
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fd41 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e207      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2C_Mem_Read+0x56>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e200      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d007      	beq.n	8002da4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2222      	movs	r2, #34	@ 0x22
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2240      	movs	r2, #64	@ 0x40
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f50 <HAL_I2C_Mem_Read+0x228>)
 8002de4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de6:	88f8      	ldrh	r0, [r7, #6]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	8979      	ldrh	r1, [r7, #10]
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	4603      	mov	r3, r0
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fc0e 	bl	8003618 <I2C_RequestMemoryRead>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e1bc      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	623b      	str	r3, [r7, #32]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	623b      	str	r3, [r7, #32]
 8002e22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e190      	b.n	8003158 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d11b      	bne.n	8002e76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e170      	b.n	8003158 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d11b      	bne.n	8002eb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	61bb      	str	r3, [r7, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	e150      	b.n	8003158 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ecc:	e144      	b.n	8003158 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	f200 80f1 	bhi.w	80030ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d123      	bne.n	8002f28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fe29 	bl	8003b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e145      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f26:	e117      	b.n	8003158 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d14e      	bne.n	8002fce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f36:	2200      	movs	r2, #0
 8002f38:	4906      	ldr	r1, [pc, #24]	@ (8002f54 <HAL_I2C_Mem_Read+0x22c>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fc54 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e11a      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
 8002f4a:	bf00      	nop
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000
 8002f54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fcc:	e0c4      	b.n	8003158 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	496c      	ldr	r1, [pc, #432]	@ (8003188 <HAL_I2C_Mem_Read+0x460>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fc05 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0cb      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	2200      	movs	r2, #0
 8003032:	4955      	ldr	r1, [pc, #340]	@ (8003188 <HAL_I2C_Mem_Read+0x460>)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fbd7 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e09d      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030b8:	e04e      	b.n	8003158 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fd3c 	bl	8003b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e058      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b04      	cmp	r3, #4
 800310c:	d124      	bne.n	8003158 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003112:	2b03      	cmp	r3, #3
 8003114:	d107      	bne.n	8003126 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003124:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f aeb6 	bne.w	8002ece <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3728      	adds	r7, #40	@ 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	00010004 	.word	0x00010004

0800318c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	@ 0x28
 8003190:	af02      	add	r7, sp, #8
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	460b      	mov	r3, r1
 800319a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800319c:	f7fe feee 	bl	8001f7c <HAL_GetTick>
 80031a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	f040 8111 	bne.w	80033d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	2319      	movs	r3, #25
 80031ba:	2201      	movs	r2, #1
 80031bc:	4988      	ldr	r1, [pc, #544]	@ (80033e0 <HAL_I2C_IsDeviceReady+0x254>)
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 fb12 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
 80031cc:	e104      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_I2C_IsDeviceReady+0x50>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0fd      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x24c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d007      	beq.n	8003202 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0201 	orr.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2224      	movs	r2, #36	@ 0x24
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a70      	ldr	r2, [pc, #448]	@ (80033e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003224:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003234:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fad0 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800325c:	d103      	bne.n	8003266 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003264:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0b6      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003278:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800327a:	f7fe fe7f 	bl	8001f7c <HAL_GetTick>
 800327e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032ae:	e025      	b.n	80032fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032b0:	f7fe fe64 	bl	8001f7c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d302      	bcc.n	80032c6 <HAL_I2C_IsDeviceReady+0x13a>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	22a0      	movs	r2, #160	@ 0xa0
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	bf0c      	ite	eq
 80032dc:	2301      	moveq	r3, #1
 80032de:	2300      	movne	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2ba0      	cmp	r3, #160	@ 0xa0
 8003306:	d005      	beq.n	8003314 <HAL_I2C_IsDeviceReady+0x188>
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_I2C_IsDeviceReady+0x188>
 800330e:	7dbb      	ldrb	r3, [r7, #22]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0cd      	beq.n	80032b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b02      	cmp	r3, #2
 8003328:	d129      	bne.n	800337e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003338:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2319      	movs	r3, #25
 8003356:	2201      	movs	r2, #1
 8003358:	4921      	ldr	r1, [pc, #132]	@ (80033e0 <HAL_I2C_IsDeviceReady+0x254>)
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa44 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e036      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e02c      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800338c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003396:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2319      	movs	r3, #25
 800339e:	2201      	movs	r2, #1
 80033a0:	490f      	ldr	r1, [pc, #60]	@ (80033e0 <HAL_I2C_IsDeviceReady+0x254>)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fa20 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e012      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	f4ff af32 	bcc.w	8003226 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	00100002 	.word	0x00100002
 80033e4:	ffff0000 	.word	0xffff0000

080033e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	460b      	mov	r3, r1
 80033f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b08      	cmp	r3, #8
 8003402:	d006      	beq.n	8003412 <I2C_MasterRequestWrite+0x2a>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d003      	beq.n	8003412 <I2C_MasterRequestWrite+0x2a>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003410:	d108      	bne.n	8003424 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e00b      	b.n	800343c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	2b12      	cmp	r3, #18
 800342a:	d107      	bne.n	800343c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800343a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f9cd 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00d      	beq.n	8003470 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003462:	d103      	bne.n	800346c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e035      	b.n	80034dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003478:	d108      	bne.n	800348c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	e01b      	b.n	80034c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800348c:	897b      	ldrh	r3, [r7, #10]
 800348e:	11db      	asrs	r3, r3, #7
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f003 0306 	and.w	r3, r3, #6
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f063 030f 	orn	r3, r3, #15
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	490e      	ldr	r1, [pc, #56]	@ (80034e4 <I2C_MasterRequestWrite+0xfc>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fa16 	bl	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e010      	b.n	80034dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ba:	897b      	ldrh	r3, [r7, #10]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4907      	ldr	r1, [pc, #28]	@ (80034e8 <I2C_MasterRequestWrite+0x100>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 fa06 	bl	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	00010008 	.word	0x00010008
 80034e8:	00010002 	.word	0x00010002

080034ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	460b      	mov	r3, r1
 8003500:	813b      	strh	r3, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003514:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	2200      	movs	r2, #0
 800351e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 f960 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353c:	d103      	bne.n	8003546 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003544:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e05f      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003558:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800355a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	492d      	ldr	r1, [pc, #180]	@ (8003614 <I2C_RequestMemoryWrite+0x128>)
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f9bb 	bl	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04c      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003588:	6a39      	ldr	r1, [r7, #32]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa46 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00d      	beq.n	80035b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b04      	cmp	r3, #4
 800359c:	d107      	bne.n	80035ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e02b      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035b8:	893b      	ldrh	r3, [r7, #8]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	e021      	b.n	8003608 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035c4:	893b      	ldrh	r3, [r7, #8]
 80035c6:	0a1b      	lsrs	r3, r3, #8
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa20 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d107      	bne.n	80035fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e005      	b.n	800360a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035fe:	893b      	ldrh	r3, [r7, #8]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	00010002 	.word	0x00010002

08003618 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	4608      	mov	r0, r1
 8003622:	4611      	mov	r1, r2
 8003624:	461a      	mov	r2, r3
 8003626:	4603      	mov	r3, r0
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	460b      	mov	r3, r1
 800362c:	813b      	strh	r3, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003640:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2200      	movs	r2, #0
 800365a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8c2 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003678:	d103      	bne.n	8003682 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e0aa      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	4952      	ldr	r1, [pc, #328]	@ (80037e4 <I2C_RequestMemoryRead+0x1cc>)
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f91d 	bl	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e097      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c4:	6a39      	ldr	r1, [r7, #32]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f9a8 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d107      	bne.n	80036ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e076      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f4:	893b      	ldrh	r3, [r7, #8]
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	611a      	str	r2, [r3, #16]
 80036fe:	e021      	b.n	8003744 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003700:	893b      	ldrh	r3, [r7, #8]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b29b      	uxth	r3, r3
 8003706:	b2da      	uxtb	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800370e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003710:	6a39      	ldr	r1, [r7, #32]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f982 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003722:	2b04      	cmp	r3, #4
 8003724:	d107      	bne.n	8003736 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e050      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800373a:	893b      	ldrh	r3, [r7, #8]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003746:	6a39      	ldr	r1, [r7, #32]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f967 	bl	8003a1c <I2C_WaitOnTXEFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	2b04      	cmp	r3, #4
 800375a:	d107      	bne.n	800376c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800376a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e035      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800377e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	2200      	movs	r2, #0
 8003788:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f82b 	bl	80037e8 <I2C_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037a6:	d103      	bne.n	80037b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e013      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037b4:	897b      	ldrh	r3, [r7, #10]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	6a3a      	ldr	r2, [r7, #32]
 80037c8:	4906      	ldr	r1, [pc, #24]	@ (80037e4 <I2C_RequestMemoryRead+0x1cc>)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f886 	bl	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	00010002 	.word	0x00010002

080037e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f8:	e048      	b.n	800388c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003800:	d044      	beq.n	800388c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003802:	f7fe fbbb 	bl	8001f7c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d302      	bcc.n	8003818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d139      	bne.n	800388c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	0c1b      	lsrs	r3, r3, #16
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10d      	bne.n	800383e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	43da      	mvns	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	461a      	mov	r2, r3
 800383c:	e00c      	b.n	8003858 <I2C_WaitOnFlagUntilTimeout+0x70>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	43da      	mvns	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4013      	ands	r3, r2
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	429a      	cmp	r2, r3
 800385c:	d116      	bne.n	800388c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e023      	b.n	80038d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d10d      	bne.n	80038b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	43da      	mvns	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	e00c      	b.n	80038cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	43da      	mvns	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	461a      	mov	r2, r3
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d093      	beq.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ea:	e071      	b.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d123      	bne.n	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800390a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e067      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d041      	beq.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394c:	f7fe fb16 	bl	8001f7c <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d302      	bcc.n	8003962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d136      	bne.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10c      	bne.n	8003986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4013      	ands	r3, r2
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e00b      	b.n	800399e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	43da      	mvns	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	4013      	ands	r3, r2
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e021      	b.n	8003a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10c      	bne.n	80039f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	43da      	mvns	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4013      	ands	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e00b      	b.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f af6d 	bne.w	80038ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a28:	e034      	b.n	8003a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f8e3 	bl	8003bf6 <I2C_IsAcknowledgeFailed>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e034      	b.n	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d028      	beq.n	8003a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fe fa9b 	bl	8001f7c <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d11d      	bne.n	8003a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	2b80      	cmp	r3, #128	@ 0x80
 8003a64:	d016      	beq.n	8003a94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e007      	b.n	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b80      	cmp	r3, #128	@ 0x80
 8003aa0:	d1c3      	bne.n	8003a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ab8:	e034      	b.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f89b 	bl	8003bf6 <I2C_IsAcknowledgeFailed>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e034      	b.n	8003b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d028      	beq.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad2:	f7fe fa53 	bl	8001f7c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d302      	bcc.n	8003ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d11d      	bne.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d016      	beq.n	8003b24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	f043 0220 	orr.w	r2, r3, #32
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e007      	b.n	8003b34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d1c3      	bne.n	8003aba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b48:	e049      	b.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d119      	bne.n	8003b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0210 	mvn.w	r2, #16
 8003b60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e030      	b.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8c:	f7fe f9f6 	bl	8001f7c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d302      	bcc.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11d      	bne.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	2b40      	cmp	r3, #64	@ 0x40
 8003bae:	d016      	beq.n	8003bde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e007      	b.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be8:	2b40      	cmp	r3, #64	@ 0x40
 8003bea:	d1ae      	bne.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c0c:	d11b      	bne.n	8003c46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c32:	f043 0204 	orr.w	r2, r3, #4
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d129      	bne.n	8003cbe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2224      	movs	r2, #36	@ 0x24
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0210 	bic.w	r2, r2, #16
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0201 	orr.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d12a      	bne.n	8003d3c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2224      	movs	r2, #36	@ 0x24
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d04:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d06:	89fb      	ldrh	r3, [r7, #14]
 8003d08:	f023 030f 	bic.w	r3, r3, #15
 8003d0c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	89fb      	ldrh	r3, [r7, #14]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	89fa      	ldrh	r2, [r7, #14]
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <HAL_PWREx_EnableOverDrive+0x90>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ddc <HAL_PWREx_EnableOverDrive+0x90>)
 8003d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d66:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <HAL_PWREx_EnableOverDrive+0x90>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d72:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d78:	f7fe f900 	bl	8001f7c <HAL_GetTick>
 8003d7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d7e:	e009      	b.n	8003d94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d80:	f7fe f8fc 	bl	8001f7c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d8e:	d901      	bls.n	8003d94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e01f      	b.n	8003dd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d94:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da0:	d1ee      	bne.n	8003d80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003da2:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003da8:	f7fe f8e8 	bl	8001f7c <HAL_GetTick>
 8003dac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dae:	e009      	b.n	8003dc4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003db0:	f7fe f8e4 	bl	8001f7c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dbe:	d901      	bls.n	8003dc4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e007      	b.n	8003dd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003dc4:	4b07      	ldr	r3, [pc, #28]	@ (8003de4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dd0:	d1ee      	bne.n	8003db0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	420e0040 	.word	0x420e0040
 8003de4:	40007000 	.word	0x40007000
 8003de8:	420e0044 	.word	0x420e0044

08003dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e267      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d075      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e0a:	4b88      	ldr	r3, [pc, #544]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d00c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b85      	ldr	r3, [pc, #532]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d112      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e22:	4b82      	ldr	r3, [pc, #520]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e2e:	d10b      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	4b7e      	ldr	r3, [pc, #504]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d05b      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x108>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d157      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e242      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e50:	d106      	bne.n	8003e60 <HAL_RCC_OscConfig+0x74>
 8003e52:	4b76      	ldr	r3, [pc, #472]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a75      	ldr	r2, [pc, #468]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e01d      	b.n	8003e9c <HAL_RCC_OscConfig+0xb0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x98>
 8003e6a:	4b70      	ldr	r3, [pc, #448]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6f      	ldr	r2, [pc, #444]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b6d      	ldr	r3, [pc, #436]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6c      	ldr	r2, [pc, #432]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0xb0>
 8003e84:	4b69      	ldr	r3, [pc, #420]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a68      	ldr	r2, [pc, #416]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	4b66      	ldr	r3, [pc, #408]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a65      	ldr	r2, [pc, #404]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe f86a 	bl	8001f7c <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fe f866 	bl	8001f7c <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e207      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0xc0>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f856 	bl	8001f7c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fe f852 	bl	8001f7c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	@ 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e1f3      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	4b51      	ldr	r3, [pc, #324]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xe8>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d063      	beq.n	8003fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f02:	4b4a      	ldr	r3, [pc, #296]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b47      	ldr	r3, [pc, #284]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d11c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1a:	4b44      	ldr	r3, [pc, #272]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d116      	bne.n	8003f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_RCC_OscConfig+0x152>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e1c7      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4937      	ldr	r1, [pc, #220]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	e03a      	b.n	8003fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f5c:	4b34      	ldr	r3, [pc, #208]	@ (8004030 <HAL_RCC_OscConfig+0x244>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe f80b 	bl	8001f7c <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6a:	f7fe f807 	bl	8001f7c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e1a8      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f88:	4b28      	ldr	r3, [pc, #160]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4925      	ldr	r1, [pc, #148]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
 8003f9c:	e015      	b.n	8003fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9e:	4b24      	ldr	r3, [pc, #144]	@ (8004030 <HAL_RCC_OscConfig+0x244>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd ffea 	bl	8001f7c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fac:	f7fd ffe6 	bl	8001f7c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e187      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d036      	beq.n	8004044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <HAL_RCC_OscConfig+0x248>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd ffca 	bl	8001f7c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fec:	f7fd ffc6 	bl	8001f7c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e167      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8004000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x200>
 800400a:	e01b      	b.n	8004044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <HAL_RCC_OscConfig+0x248>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004012:	f7fd ffb3 	bl	8001f7c <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004018:	e00e      	b.n	8004038 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401a:	f7fd ffaf 	bl	8001f7c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d907      	bls.n	8004038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e150      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
 800402c:	40023800 	.word	0x40023800
 8004030:	42470000 	.word	0x42470000
 8004034:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	4b88      	ldr	r3, [pc, #544]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800403a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ea      	bne.n	800401a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8097 	beq.w	8004180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004056:	4b81      	ldr	r3, [pc, #516]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	4b7d      	ldr	r3, [pc, #500]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	4a7c      	ldr	r2, [pc, #496]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004070:	6413      	str	r3, [r2, #64]	@ 0x40
 8004072:	4b7a      	ldr	r3, [pc, #488]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004082:	4b77      	ldr	r3, [pc, #476]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d118      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408e:	4b74      	ldr	r3, [pc, #464]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a73      	ldr	r2, [pc, #460]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409a:	f7fd ff6f 	bl	8001f7c <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a2:	f7fd ff6b 	bl	8001f7c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e10c      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2ea>
 80040c8:	4b64      	ldr	r3, [pc, #400]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040cc:	4a63      	ldr	r2, [pc, #396]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d4:	e01c      	b.n	8004110 <HAL_RCC_OscConfig+0x324>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x30c>
 80040de:	4b5f      	ldr	r3, [pc, #380]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	4a5e      	ldr	r2, [pc, #376]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ea:	4b5c      	ldr	r3, [pc, #368]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	4a5b      	ldr	r2, [pc, #364]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0x324>
 80040f8:	4b58      	ldr	r3, [pc, #352]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	4a57      	ldr	r2, [pc, #348]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	6713      	str	r3, [r2, #112]	@ 0x70
 8004104:	4b55      	ldr	r3, [pc, #340]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004108:	4a54      	ldr	r2, [pc, #336]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800410a:	f023 0304 	bic.w	r3, r3, #4
 800410e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004118:	f7fd ff30 	bl	8001f7c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fd ff2c 	bl	8001f7c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0cb      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004136:	4b49      	ldr	r3, [pc, #292]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0ee      	beq.n	8004120 <HAL_RCC_OscConfig+0x334>
 8004142:	e014      	b.n	800416e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004144:	f7fd ff1a 	bl	8001f7c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414a:	e00a      	b.n	8004162 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fd ff16 	bl	8001f7c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0b5      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004162:	4b3e      	ldr	r3, [pc, #248]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ee      	bne.n	800414c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b39      	ldr	r3, [pc, #228]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	4a38      	ldr	r2, [pc, #224]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80a1 	beq.w	80042cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800418a:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b08      	cmp	r3, #8
 8004194:	d05c      	beq.n	8004250 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d141      	bne.n	8004222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419e:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <HAL_RCC_OscConfig+0x478>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fd feea 	bl	8001f7c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fd fee6 	bl	8001f7c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e087      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	4b27      	ldr	r3, [pc, #156]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	019b      	lsls	r3, r3, #6
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	3b01      	subs	r3, #1
 80041e4:	041b      	lsls	r3, r3, #16
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	491b      	ldr	r1, [pc, #108]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <HAL_RCC_OscConfig+0x478>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fa:	f7fd febf 	bl	8001f7c <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004202:	f7fd febb 	bl	8001f7c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e05c      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	4b11      	ldr	r3, [pc, #68]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x416>
 8004220:	e054      	b.n	80042cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <HAL_RCC_OscConfig+0x478>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fd fea8 	bl	8001f7c <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fd fea4 	bl	8001f7c <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e045      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b06      	ldr	r3, [pc, #24]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x444>
 800424e:	e03d      	b.n	80042cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e038      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
 800425c:	40023800 	.word	0x40023800
 8004260:	40007000 	.word	0x40007000
 8004264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004268:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_RCC_OscConfig+0x4ec>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d028      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d121      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d11a      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800429e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d111      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	3b01      	subs	r3, #1
 80042b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800

080042dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0cc      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042f0:	4b68      	ldr	r3, [pc, #416]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d90c      	bls.n	8004318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b65      	ldr	r3, [pc, #404]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b63      	ldr	r3, [pc, #396]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0b8      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004330:	4b59      	ldr	r3, [pc, #356]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a58      	ldr	r2, [pc, #352]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800433a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004348:	4b53      	ldr	r3, [pc, #332]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4a52      	ldr	r2, [pc, #328]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004354:	4b50      	ldr	r3, [pc, #320]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	494d      	ldr	r1, [pc, #308]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d044      	beq.n	80043fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d107      	bne.n	800438a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b47      	ldr	r3, [pc, #284]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d119      	bne.n	80043ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e07f      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d003      	beq.n	800439a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004396:	2b03      	cmp	r3, #3
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439a:	4b3f      	ldr	r3, [pc, #252]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e06f      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e067      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ba:	4b37      	ldr	r3, [pc, #220]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 0203 	bic.w	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4934      	ldr	r1, [pc, #208]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043cc:	f7fd fdd6 	bl	8001f7c <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d4:	f7fd fdd2 	bl	8001f7c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e04f      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 020c 	and.w	r2, r3, #12
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d1eb      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043fc:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d20c      	bcs.n	8004424 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	4b22      	ldr	r3, [pc, #136]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e032      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004430:	4b19      	ldr	r3, [pc, #100]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4916      	ldr	r1, [pc, #88]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444e:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	490e      	ldr	r1, [pc, #56]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004462:	f000 f821 	bl	80044a8 <HAL_RCC_GetSysClockFreq>
 8004466:	4602      	mov	r2, r0
 8004468:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	490a      	ldr	r1, [pc, #40]	@ (800449c <HAL_RCC_ClockConfig+0x1c0>)
 8004474:	5ccb      	ldrb	r3, [r1, r3]
 8004476:	fa22 f303 	lsr.w	r3, r2, r3
 800447a:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800447e:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fd36 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40023c00 	.word	0x40023c00
 8004498:	40023800 	.word	0x40023800
 800449c:	08008180 	.word	0x08008180
 80044a0:	20000008 	.word	0x20000008
 80044a4:	2000000c 	.word	0x2000000c

080044a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ac:	b094      	sub	sp, #80	@ 0x50
 80044ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c0:	4b79      	ldr	r3, [pc, #484]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d00d      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x40>
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	f200 80e1 	bhi.w	8004694 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x34>
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d003      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044da:	e0db      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b73      	ldr	r3, [pc, #460]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x204>)
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044e0:	e0db      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044e2:	4b73      	ldr	r3, [pc, #460]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80044e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044e6:	e0d8      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e8:	4b6f      	ldr	r3, [pc, #444]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044f2:	4b6d      	ldr	r3, [pc, #436]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d063      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fe:	4b6a      	ldr	r3, [pc, #424]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	099b      	lsrs	r3, r3, #6
 8004504:	2200      	movs	r2, #0
 8004506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004508:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	633b      	str	r3, [r7, #48]	@ 0x30
 8004512:	2300      	movs	r3, #0
 8004514:	637b      	str	r3, [r7, #52]	@ 0x34
 8004516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800451a:	4622      	mov	r2, r4
 800451c:	462b      	mov	r3, r5
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	0159      	lsls	r1, r3, #5
 8004528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452c:	0150      	lsls	r0, r2, #5
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4621      	mov	r1, r4
 8004534:	1a51      	subs	r1, r2, r1
 8004536:	6139      	str	r1, [r7, #16]
 8004538:	4629      	mov	r1, r5
 800453a:	eb63 0301 	sbc.w	r3, r3, r1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800454c:	4659      	mov	r1, fp
 800454e:	018b      	lsls	r3, r1, #6
 8004550:	4651      	mov	r1, sl
 8004552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004556:	4651      	mov	r1, sl
 8004558:	018a      	lsls	r2, r1, #6
 800455a:	4651      	mov	r1, sl
 800455c:	ebb2 0801 	subs.w	r8, r2, r1
 8004560:	4659      	mov	r1, fp
 8004562:	eb63 0901 	sbc.w	r9, r3, r1
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800457a:	4690      	mov	r8, r2
 800457c:	4699      	mov	r9, r3
 800457e:	4623      	mov	r3, r4
 8004580:	eb18 0303 	adds.w	r3, r8, r3
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	462b      	mov	r3, r5
 8004588:	eb49 0303 	adc.w	r3, r9, r3
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800459a:	4629      	mov	r1, r5
 800459c:	024b      	lsls	r3, r1, #9
 800459e:	4621      	mov	r1, r4
 80045a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045a4:	4621      	mov	r1, r4
 80045a6:	024a      	lsls	r2, r1, #9
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ae:	2200      	movs	r2, #0
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045b8:	f7fb fe82 	bl	80002c0 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	e058      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c6:	4b38      	ldr	r3, [pc, #224]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	099b      	lsrs	r3, r3, #6
 80045cc:	2200      	movs	r2, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	4611      	mov	r1, r2
 80045d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	2300      	movs	r3, #0
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
 80045dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	0159      	lsls	r1, r3, #5
 80045ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f2:	0150      	lsls	r0, r2, #5
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4641      	mov	r1, r8
 80045fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80045fe:	4649      	mov	r1, r9
 8004600:	eb63 0b01 	sbc.w	fp, r3, r1
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004618:	ebb2 040a 	subs.w	r4, r2, sl
 800461c:	eb63 050b 	sbc.w	r5, r3, fp
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	00eb      	lsls	r3, r5, #3
 800462a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800462e:	00e2      	lsls	r2, r4, #3
 8004630:	4614      	mov	r4, r2
 8004632:	461d      	mov	r5, r3
 8004634:	4643      	mov	r3, r8
 8004636:	18e3      	adds	r3, r4, r3
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	464b      	mov	r3, r9
 800463c:	eb45 0303 	adc.w	r3, r5, r3
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800464e:	4629      	mov	r1, r5
 8004650:	028b      	lsls	r3, r1, #10
 8004652:	4621      	mov	r1, r4
 8004654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004658:	4621      	mov	r1, r4
 800465a:	028a      	lsls	r2, r1, #10
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004662:	2200      	movs	r2, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	61fa      	str	r2, [r7, #28]
 8004668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800466c:	f7fb fe28 	bl	80002c0 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4613      	mov	r3, r2
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	3301      	adds	r3, #1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800468a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004692:	e002      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004696:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800469c:	4618      	mov	r0, r3
 800469e:	3750      	adds	r7, #80	@ 0x50
 80046a0:	46bd      	mov	sp, r7
 80046a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	007a1200 	.word	0x007a1200

080046b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	@ (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000008 	.word	0x20000008

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046d0:	f7ff fff0 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0a9b      	lsrs	r3, r3, #10
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4903      	ldr	r1, [pc, #12]	@ (80046f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	08008190 	.word	0x08008190

080046f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046f8:	f7ff ffdc 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0b5b      	lsrs	r3, r3, #13
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	@ (8004718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	08008190 	.word	0x08008190

0800471c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e07b      	b.n	8004826 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800473e:	d009      	beq.n	8004754 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
 8004746:	e005      	b.n	8004754 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc ff5e 	bl	8001630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d8:	ea42 0103 	orr.w	r1, r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0104 	and.w	r1, r3, #4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	f003 0210 	and.w	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b088      	sub	sp, #32
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	60b9      	str	r1, [r7, #8]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800483e:	f7fd fb9d 	bl	8001f7c <HAL_GetTick>
 8004842:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d001      	beq.n	8004858 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004854:	2302      	movs	r3, #2
 8004856:	e12a      	b.n	8004aae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_SPI_Transmit+0x36>
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e122      	b.n	8004aae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_SPI_Transmit+0x48>
 8004872:	2302      	movs	r3, #2
 8004874:	e11b      	b.n	8004aae <HAL_SPI_Transmit+0x280>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2203      	movs	r2, #3
 8004882:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	88fa      	ldrh	r2, [r7, #6]
 8004896:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	88fa      	ldrh	r2, [r7, #6]
 800489c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c4:	d10f      	bne.n	80048e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f0:	2b40      	cmp	r3, #64	@ 0x40
 80048f2:	d007      	beq.n	8004904 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490c:	d152      	bne.n	80049b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_SPI_Transmit+0xee>
 8004916:	8b7b      	ldrh	r3, [r7, #26]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d145      	bne.n	80049a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004920:	881a      	ldrh	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492c:	1c9a      	adds	r2, r3, #2
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004940:	e032      	b.n	80049a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b02      	cmp	r3, #2
 800494e:	d112      	bne.n	8004976 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	881a      	ldrh	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004960:	1c9a      	adds	r2, r3, #2
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004974:	e018      	b.n	80049a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004976:	f7fd fb01 	bl	8001f7c <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d803      	bhi.n	800498e <HAL_SPI_Transmit+0x160>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d102      	bne.n	8004994 <HAL_SPI_Transmit+0x166>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d109      	bne.n	80049a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e082      	b.n	8004aae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1c7      	bne.n	8004942 <HAL_SPI_Transmit+0x114>
 80049b2:	e053      	b.n	8004a5c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_SPI_Transmit+0x194>
 80049bc:	8b7b      	ldrh	r3, [r7, #26]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d147      	bne.n	8004a52 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	330c      	adds	r3, #12
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049e8:	e033      	b.n	8004a52 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d113      	bne.n	8004a20 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	330c      	adds	r3, #12
 8004a02:	7812      	ldrb	r2, [r2, #0]
 8004a04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a1e:	e018      	b.n	8004a52 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a20:	f7fd faac 	bl	8001f7c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d803      	bhi.n	8004a38 <HAL_SPI_Transmit+0x20a>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_Transmit+0x210>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e02d      	b.n	8004aae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1c6      	bne.n	80049ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fbe7 	bl	8005234 <SPI_EndRxTxTransaction>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10a      	bne.n	8004a90 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b088      	sub	sp, #32
 8004aba:	af02      	add	r7, sp, #8
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e104      	b.n	8004ce0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ade:	d112      	bne.n	8004b06 <HAL_SPI_Receive+0x50>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10e      	bne.n	8004b06 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2204      	movs	r2, #4
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f8f3 	bl	8004ce8 <HAL_SPI_TransmitReceive>
 8004b02:	4603      	mov	r3, r0
 8004b04:	e0ec      	b.n	8004ce0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b06:	f7fd fa39 	bl	8001f7c <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SPI_Receive+0x62>
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0e1      	b.n	8004ce0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_SPI_Receive+0x74>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e0da      	b.n	8004ce0 <HAL_SPI_Receive+0x22a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2204      	movs	r2, #4
 8004b36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	88fa      	ldrh	r2, [r7, #6]
 8004b50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b78:	d10f      	bne.n	8004b9a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b98:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	d007      	beq.n	8004bb8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bb6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d170      	bne.n	8004ca2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bc0:	e035      	b.n	8004c2e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d115      	bne.n	8004bfc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f103 020c 	add.w	r2, r3, #12
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bdc:	7812      	ldrb	r2, [r2, #0]
 8004bde:	b2d2      	uxtb	r2, r2
 8004be0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bfa:	e018      	b.n	8004c2e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bfc:	f7fd f9be 	bl	8001f7c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d803      	bhi.n	8004c14 <HAL_SPI_Receive+0x15e>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Receive+0x164>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e058      	b.n	8004ce0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1c4      	bne.n	8004bc2 <HAL_SPI_Receive+0x10c>
 8004c38:	e038      	b.n	8004cac <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d113      	bne.n	8004c70 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c52:	b292      	uxth	r2, r2
 8004c54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c6e:	e018      	b.n	8004ca2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c70:	f7fd f984 	bl	8001f7c <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d803      	bhi.n	8004c88 <HAL_SPI_Receive+0x1d2>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c86:	d102      	bne.n	8004c8e <HAL_SPI_Receive+0x1d8>
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e01e      	b.n	8004ce0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1c6      	bne.n	8004c3a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 fa59 	bl	8005168 <SPI_EndRxTransaction>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfa:	f7fd f93f 	bl	8001f7c <HAL_GetTick>
 8004cfe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d06:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d00c      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x4a>
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d1e:	d106      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x46>
 8004d28:	7ffb      	ldrb	r3, [r7, #31]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d001      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e17f      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x5c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_SPI_TransmitReceive+0x5c>
 8004d3e:	887b      	ldrh	r3, [r7, #2]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e174      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x6e>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e16d      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d003      	beq.n	8004d72 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	887a      	ldrh	r2, [r7, #2]
 8004d82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	887a      	ldrh	r2, [r7, #2]
 8004d88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db2:	2b40      	cmp	r3, #64	@ 0x40
 8004db4:	d007      	beq.n	8004dc6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dce:	d17e      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_SPI_TransmitReceive+0xf6>
 8004dd8:	8afb      	ldrh	r3, [r7, #22]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d16c      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	881a      	ldrh	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dee:	1c9a      	adds	r2, r3, #2
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e02:	e059      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d11b      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x162>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d016      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x162>
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d113      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e26:	881a      	ldrh	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	1c9a      	adds	r2, r3, #2
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d119      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x1a4>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d014      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6c:	b292      	uxth	r2, r2
 8004e6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	1c9a      	adds	r2, r3, #2
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e8c:	f7fd f876 	bl	8001f7c <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d80d      	bhi.n	8004eb8 <HAL_SPI_TransmitReceive+0x1d0>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d009      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e0bc      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1a0      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x11c>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d19b      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x11c>
 8004ecc:	e082      	b.n	8004fd4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_SPI_TransmitReceive+0x1f4>
 8004ed6:	8afb      	ldrh	r3, [r7, #22]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d171      	bne.n	8004fc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f02:	e05d      	b.n	8004fc0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d11c      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x264>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d017      	beq.n	8004f4c <HAL_SPI_TransmitReceive+0x264>
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d114      	bne.n	8004f4c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	7812      	ldrb	r2, [r2, #0]
 8004f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d119      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x2a6>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d014      	beq.n	8004f8e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f8e:	f7fc fff5 	bl	8001f7c <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d803      	bhi.n	8004fa6 <HAL_SPI_TransmitReceive+0x2be>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d102      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x2c4>
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e038      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d19c      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x21c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d197      	bne.n	8004f04 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fd4:	6a3a      	ldr	r2, [r7, #32]
 8004fd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f92b 	bl	8005234 <SPI_EndRxTxTransaction>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d008      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e01d      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005030:	2300      	movs	r3, #0
  }
}
 8005032:	4618      	mov	r0, r3
 8005034:	3728      	adds	r7, #40	@ 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005048:	b2db      	uxtb	r3, r3
}
 800504a:	4618      	mov	r0, r3
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005068:	f7fc ff88 	bl	8001f7c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	4413      	add	r3, r2
 8005076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005078:	f7fc ff80 	bl	8001f7c <HAL_GetTick>
 800507c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800507e:	4b39      	ldr	r3, [pc, #228]	@ (8005164 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	015b      	lsls	r3, r3, #5
 8005084:	0d1b      	lsrs	r3, r3, #20
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	fb02 f303 	mul.w	r3, r2, r3
 800508c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508e:	e054      	b.n	800513a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d050      	beq.n	800513a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005098:	f7fc ff70 	bl	8001f7c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d902      	bls.n	80050ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d13d      	bne.n	800512a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c6:	d111      	bne.n	80050ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d0:	d004      	beq.n	80050dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050da:	d107      	bne.n	80050ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f4:	d10f      	bne.n	8005116 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e017      	b.n	800515a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	3b01      	subs	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4013      	ands	r3, r2
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	429a      	cmp	r2, r3
 8005148:	bf0c      	ite	eq
 800514a:	2301      	moveq	r3, #1
 800514c:	2300      	movne	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	429a      	cmp	r2, r3
 8005156:	d19b      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000008 	.word	0x20000008

08005168 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800517c:	d111      	bne.n	80051a2 <SPI_EndRxTransaction+0x3a>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005186:	d004      	beq.n	8005192 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005190:	d107      	bne.n	80051a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051aa:	d12a      	bne.n	8005202 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051b4:	d012      	beq.n	80051dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff ff49 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02d      	beq.n	8005228 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e026      	b.n	800522a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	2101      	movs	r1, #1
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff ff36 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01a      	beq.n	8005228 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051f6:	f043 0220 	orr.w	r2, r3, #32
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e013      	b.n	800522a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2200      	movs	r2, #0
 800520a:	2101      	movs	r1, #1
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff ff23 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	f043 0220 	orr.w	r2, r3, #32
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e000      	b.n	800522a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2201      	movs	r2, #1
 8005248:	2102      	movs	r1, #2
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7ff ff04 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e032      	b.n	80052cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005266:	4b1b      	ldr	r3, [pc, #108]	@ (80052d4 <SPI_EndRxTxTransaction+0xa0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1b      	ldr	r2, [pc, #108]	@ (80052d8 <SPI_EndRxTxTransaction+0xa4>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	0d5b      	lsrs	r3, r3, #21
 8005272:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005276:	fb02 f303 	mul.w	r3, r2, r3
 800527a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005284:	d112      	bne.n	80052ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	@ 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff fee1 	bl	8005058 <SPI_WaitFlagStateUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e00f      	b.n	80052cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c2:	2b80      	cmp	r3, #128	@ 0x80
 80052c4:	d0f2      	beq.n	80052ac <SPI_EndRxTxTransaction+0x78>
 80052c6:	e000      	b.n	80052ca <SPI_EndRxTxTransaction+0x96>
        break;
 80052c8:	bf00      	nop
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000008 	.word	0x20000008
 80052d8:	165e9f81 	.word	0x165e9f81

080052dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e041      	b.n	8005372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc f9dc 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f000 f9c0 	bl	80056a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e04e      	b.n	8005432 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a23      	ldr	r2, [pc, #140]	@ (8005440 <HAL_TIM_Base_Start_IT+0xc4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d022      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053be:	d01d      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005444 <HAL_TIM_Base_Start_IT+0xc8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d018      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <HAL_TIM_Base_Start_IT+0xcc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <HAL_TIM_Base_Start_IT+0xd0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00e      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <HAL_TIM_Base_Start_IT+0xd4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a19      	ldr	r2, [pc, #100]	@ (8005454 <HAL_TIM_Base_Start_IT+0xd8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a18      	ldr	r2, [pc, #96]	@ (8005458 <HAL_TIM_Base_Start_IT+0xdc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d111      	bne.n	8005420 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b06      	cmp	r3, #6
 800540c:	d010      	beq.n	8005430 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 0201 	orr.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	e007      	b.n	8005430 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40010000 	.word	0x40010000
 8005444:	40000400 	.word	0x40000400
 8005448:	40000800 	.word	0x40000800
 800544c:	40000c00 	.word	0x40000c00
 8005450:	40010400 	.word	0x40010400
 8005454:	40014000 	.word	0x40014000
 8005458:	40001800 	.word	0x40001800

0800545c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d020      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01b      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0202 	mvn.w	r2, #2
 8005490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8dc 	bl	8005664 <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f8ce 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8df 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d020      	beq.n	800550c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01b      	beq.n	800550c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0204 	mvn.w	r2, #4
 80054dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8b6 	bl	8005664 <HAL_TIM_IC_CaptureCallback>
 80054f8:	e005      	b.n	8005506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f8a8 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8b9 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d020      	beq.n	8005558 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01b      	beq.n	8005558 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0208 	mvn.w	r2, #8
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2204      	movs	r2, #4
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f890 	bl	8005664 <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f882 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f893 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	d020      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01b      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0210 	mvn.w	r2, #16
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2208      	movs	r2, #8
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f86a 	bl	8005664 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f85c 	bl	8005650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f86d 	bl	8005678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0201 	mvn.w	r2, #1
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f83a 	bl	800563c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f98c 	bl	8005904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f83e 	bl	800568c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0220 	mvn.w	r2, #32
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f95e 	bl	80058f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005634:	bf00      	nop
 8005636:	3710      	adds	r7, #16
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a46      	ldr	r2, [pc, #280]	@ (80057cc <TIM_Base_SetConfig+0x12c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056be:	d00f      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a43      	ldr	r2, [pc, #268]	@ (80057d0 <TIM_Base_SetConfig+0x130>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a42      	ldr	r2, [pc, #264]	@ (80057d4 <TIM_Base_SetConfig+0x134>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a41      	ldr	r2, [pc, #260]	@ (80057d8 <TIM_Base_SetConfig+0x138>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a40      	ldr	r2, [pc, #256]	@ (80057dc <TIM_Base_SetConfig+0x13c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d108      	bne.n	80056f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a35      	ldr	r2, [pc, #212]	@ (80057cc <TIM_Base_SetConfig+0x12c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02b      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005700:	d027      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a32      	ldr	r2, [pc, #200]	@ (80057d0 <TIM_Base_SetConfig+0x130>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d023      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a31      	ldr	r2, [pc, #196]	@ (80057d4 <TIM_Base_SetConfig+0x134>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01f      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a30      	ldr	r2, [pc, #192]	@ (80057d8 <TIM_Base_SetConfig+0x138>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01b      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2f      	ldr	r2, [pc, #188]	@ (80057dc <TIM_Base_SetConfig+0x13c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d017      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2e      	ldr	r2, [pc, #184]	@ (80057e0 <TIM_Base_SetConfig+0x140>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2d      	ldr	r2, [pc, #180]	@ (80057e4 <TIM_Base_SetConfig+0x144>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00f      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a2c      	ldr	r2, [pc, #176]	@ (80057e8 <TIM_Base_SetConfig+0x148>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00b      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a2b      	ldr	r2, [pc, #172]	@ (80057ec <TIM_Base_SetConfig+0x14c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d007      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <TIM_Base_SetConfig+0x150>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a29      	ldr	r2, [pc, #164]	@ (80057f4 <TIM_Base_SetConfig+0x154>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d108      	bne.n	8005764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a10      	ldr	r2, [pc, #64]	@ (80057cc <TIM_Base_SetConfig+0x12c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_Base_SetConfig+0xf8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a12      	ldr	r2, [pc, #72]	@ (80057dc <TIM_Base_SetConfig+0x13c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d103      	bne.n	80057a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f023 0201 	bic.w	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	611a      	str	r2, [r3, #16]
  }
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40010400 	.word	0x40010400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800
 80057ec:	40001800 	.word	0x40001800
 80057f0:	40001c00 	.word	0x40001c00
 80057f4:	40002000 	.word	0x40002000

080057f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e05a      	b.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a21      	ldr	r2, [pc, #132]	@ (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585c:	d01d      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1b      	ldr	r2, [pc, #108]	@ (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1a      	ldr	r2, [pc, #104]	@ (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10c      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40010400 	.word	0x40010400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40001800 	.word	0x40001800

080058f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e042      	b.n	80059b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fee6 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2224      	movs	r2, #36	@ 0x24
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800595a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fdbd 	bl	80064dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	@ 0x28
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d175      	bne.n	8005ac4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_UART_Transmit+0x2c>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e06e      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2221      	movs	r2, #33	@ 0x21
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059f6:	f7fc fac1 	bl	8001f7c <HAL_GetTick>
 80059fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a10:	d108      	bne.n	8005a24 <HAL_UART_Transmit+0x6c>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e003      	b.n	8005a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a2c:	e02e      	b.n	8005a8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2180      	movs	r1, #128	@ 0x80
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fb1f 	bl	800607c <UART_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e03a      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e007      	b.n	8005a7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1cb      	bne.n	8005a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2140      	movs	r1, #64	@ 0x40
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 faeb 	bl	800607c <UART_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b20      	cmp	r3, #32
 8005ae6:	d112      	bne.n	8005b0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_Receive_IT+0x26>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e00b      	b.n	8005b10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	461a      	mov	r2, r3
 8005b02:	68b9      	ldr	r1, [r7, #8]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fb12 	bl	800612e <UART_Start_Receive_IT>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <HAL_UART_IRQHandler+0x66>
 8005b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fbf2 	bl	8006360 <UART_Receive_IT>
      return;
 8005b7c:	e25b      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 80de 	beq.w	8005d44 <HAL_UART_IRQHandler+0x22c>
 8005b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b98:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 80d1 	beq.w	8005d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xae>
 8005bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d005      	beq.n	8005bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <HAL_UART_IRQHandler+0xd2>
 8005bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	f043 0202 	orr.w	r2, r3, #2
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00b      	beq.n	8005c0e <HAL_UART_IRQHandler+0xf6>
 8005bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d011      	beq.n	8005c3e <HAL_UART_IRQHandler+0x126>
 8005c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d105      	bne.n	8005c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c36:	f043 0208 	orr.w	r2, r3, #8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 81f2 	beq.w	800602c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_UART_IRQHandler+0x14e>
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fb7d 	bl	8006360 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	bf0c      	ite	eq
 8005c74:	2301      	moveq	r3, #1
 8005c76:	2300      	movne	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <HAL_UART_IRQHandler+0x17a>
 8005c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04f      	beq.n	8005d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa85 	bl	80061a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca2:	2b40      	cmp	r3, #64	@ 0x40
 8005ca4:	d141      	bne.n	8005d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3314      	adds	r3, #20
 8005cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cb4:	e853 3f00 	ldrex	r3, [r3]
 8005cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1d9      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d013      	beq.n	8005d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfe:	4a7e      	ldr	r2, [pc, #504]	@ (8005ef8 <HAL_UART_IRQHandler+0x3e0>)
 8005d00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fc fae9 	bl	80022de <HAL_DMA_Abort_IT>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d016      	beq.n	8005d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d20:	e00e      	b.n	8005d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f994 	bl	8006050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d28:	e00a      	b.n	8005d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f990 	bl	8006050 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	e006      	b.n	8005d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f98c 	bl	8006050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d3e:	e175      	b.n	800602c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	bf00      	nop
    return;
 8005d42:	e173      	b.n	800602c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	f040 814f 	bne.w	8005fec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8148 	beq.w	8005fec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8141 	beq.w	8005fec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60bb      	str	r3, [r7, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8a:	2b40      	cmp	r3, #64	@ 0x40
 8005d8c:	f040 80b6 	bne.w	8005efc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 8145 	beq.w	8006030 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dae:	429a      	cmp	r2, r3
 8005db0:	f080 813e 	bcs.w	8006030 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dc6:	f000 8088 	beq.w	8005eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dd8:	e853 3f00 	ldrex	r3, [r3]
 8005ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1d9      	bne.n	8005dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3314      	adds	r3, #20
 8005e1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e1      	bne.n	8005e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3314      	adds	r3, #20
 8005e58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e5c:	e853 3f00 	ldrex	r3, [r3]
 8005e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3314      	adds	r3, #20
 8005e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e3      	bne.n	8005e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	330c      	adds	r3, #12
 8005e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eaa:	f023 0310 	bic.w	r3, r3, #16
 8005eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	330c      	adds	r3, #12
 8005eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ebc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ebe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e3      	bne.n	8005e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fc f992 	bl	80021fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f8b7 	bl	8006064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ef6:	e09b      	b.n	8006030 <HAL_UART_IRQHandler+0x518>
 8005ef8:	08006269 	.word	0x08006269
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 808e 	beq.w	8006034 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8089 	beq.w	8006034 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f46:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e3      	bne.n	8005f22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	623b      	str	r3, [r7, #32]
   return(result);
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e3      	bne.n	8005f5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2220      	movs	r2, #32
 8005f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	330c      	adds	r3, #12
 8005fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0310 	bic.w	r3, r3, #16
 8005fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005fc4:	61fa      	str	r2, [r7, #28]
 8005fc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	69b9      	ldr	r1, [r7, #24]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e3      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f83d 	bl	8006064 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fea:	e023      	b.n	8006034 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <HAL_UART_IRQHandler+0x4f4>
 8005ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f943 	bl	8006290 <UART_Transmit_IT>
    return;
 800600a:	e014      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800600c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <HAL_UART_IRQHandler+0x51e>
 8006018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f983 	bl	8006330 <UART_EndTransmit_IT>
    return;
 800602a:	e004      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
    return;
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
      return;
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <HAL_UART_IRQHandler+0x51e>
      return;
 8006034:	bf00      	nop
  }
}
 8006036:	37e8      	adds	r7, #232	@ 0xe8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608c:	e03b      	b.n	8006106 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d037      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fb ff71 	bl	8001f7c <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <UART_WaitOnFlagUntilTimeout+0x30>
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e03a      	b.n	8006126 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d023      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b80      	cmp	r3, #128	@ 0x80
 80060c2:	d020      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d01d      	beq.n	8006106 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d116      	bne.n	8006106 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	617b      	str	r3, [r7, #20]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f857 	bl	80061a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2208      	movs	r2, #8
 80060f8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e00f      	b.n	8006126 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	429a      	cmp	r2, r3
 8006114:	bf0c      	ite	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	2300      	movne	r3, #0
 800611a:	b2db      	uxtb	r3, r3
 800611c:	461a      	mov	r2, r3
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	429a      	cmp	r2, r3
 8006122:	d0b4      	beq.n	800608e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	4613      	mov	r3, r2
 800613a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	88fa      	ldrh	r2, [r7, #6]
 8006146:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2222      	movs	r2, #34	@ 0x22
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006172:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0220 	orr.w	r2, r2, #32
 8006192:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b095      	sub	sp, #84	@ 0x54
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	330c      	adds	r3, #12
 80061c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80061cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e5      	bne.n	80061aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3314      	adds	r3, #20
 80061e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e5      	bne.n	80061de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	2b01      	cmp	r3, #1
 8006218:	d119      	bne.n	800624e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	330c      	adds	r3, #12
 8006220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	60bb      	str	r3, [r7, #8]
   return(result);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f023 0310 	bic.w	r3, r3, #16
 8006230:	647b      	str	r3, [r7, #68]	@ 0x44
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	330c      	adds	r3, #12
 8006238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800623a:	61ba      	str	r2, [r7, #24]
 800623c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6979      	ldr	r1, [r7, #20]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	613b      	str	r3, [r7, #16]
   return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e5      	bne.n	800621a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800625c:	bf00      	nop
 800625e:	3754      	adds	r7, #84	@ 0x54
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7ff fee4 	bl	8006050 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b21      	cmp	r3, #33	@ 0x21
 80062a2:	d13e      	bne.n	8006322 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ac:	d114      	bne.n	80062d8 <UART_Transmit_IT+0x48>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d110      	bne.n	80062d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	1c9a      	adds	r2, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	621a      	str	r2, [r3, #32]
 80062d6:	e008      	b.n	80062ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6211      	str	r1, [r2, #32]
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4619      	mov	r1, r3
 80062f8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800630c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800631c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	e000      	b.n	8006324 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006322:	2302      	movs	r3, #2
  }
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006346:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7ff fe73 	bl	800603c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08c      	sub	sp, #48	@ 0x30
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b22      	cmp	r3, #34	@ 0x22
 8006372:	f040 80ae 	bne.w	80064d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637e:	d117      	bne.n	80063b0 <UART_Receive_IT+0x50>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d113      	bne.n	80063b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006388:	2300      	movs	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006390:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639e:	b29a      	uxth	r2, r3
 80063a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	1c9a      	adds	r2, r3, #2
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80063ae:	e026      	b.n	80063fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c2:	d007      	beq.n	80063d4 <UART_Receive_IT+0x74>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <UART_Receive_IT+0x82>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d106      	bne.n	80063e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e008      	b.n	80063f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4619      	mov	r1, r3
 800640c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800640e:	2b00      	cmp	r3, #0
 8006410:	d15d      	bne.n	80064ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0220 	bic.w	r2, r2, #32
 8006420:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006430:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695a      	ldr	r2, [r3, #20]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006454:	2b01      	cmp	r3, #1
 8006456:	d135      	bne.n	80064c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	613b      	str	r3, [r7, #16]
   return(result);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f023 0310 	bic.w	r3, r3, #16
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	330c      	adds	r3, #12
 800647c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800647e:	623a      	str	r2, [r7, #32]
 8006480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	69f9      	ldr	r1, [r7, #28]
 8006484:	6a3a      	ldr	r2, [r7, #32]
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	61bb      	str	r3, [r7, #24]
   return(result);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e5      	bne.n	800645e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b10      	cmp	r3, #16
 800649e:	d10a      	bne.n	80064b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff fdd1 	bl	8006064 <HAL_UARTEx_RxEventCallback>
 80064c2:	e002      	b.n	80064ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fa fb75 	bl	8000bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e002      	b.n	80064d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064d2:	2302      	movs	r3, #2
  }
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3730      	adds	r7, #48	@ 0x30
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e0:	b0c0      	sub	sp, #256	@ 0x100
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	68d9      	ldr	r1, [r3, #12]
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	ea40 0301 	orr.w	r3, r0, r1
 8006504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	431a      	orrs	r2, r3
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	431a      	orrs	r2, r3
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006534:	f021 010c 	bic.w	r1, r1, #12
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006542:	430b      	orrs	r3, r1
 8006544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006556:	6999      	ldr	r1, [r3, #24]
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	ea40 0301 	orr.w	r3, r0, r1
 8006562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b8f      	ldr	r3, [pc, #572]	@ (80067a8 <UART_SetConfig+0x2cc>)
 800656c:	429a      	cmp	r2, r3
 800656e:	d005      	beq.n	800657c <UART_SetConfig+0xa0>
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b8d      	ldr	r3, [pc, #564]	@ (80067ac <UART_SetConfig+0x2d0>)
 8006578:	429a      	cmp	r2, r3
 800657a:	d104      	bne.n	8006586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800657c:	f7fe f8ba 	bl	80046f4 <HAL_RCC_GetPCLK2Freq>
 8006580:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006584:	e003      	b.n	800658e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006586:	f7fe f8a1 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 800658a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800658e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006598:	f040 810c 	bne.w	80067b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800659c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065ae:	4622      	mov	r2, r4
 80065b0:	462b      	mov	r3, r5
 80065b2:	1891      	adds	r1, r2, r2
 80065b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065b6:	415b      	adcs	r3, r3
 80065b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065be:	4621      	mov	r1, r4
 80065c0:	eb12 0801 	adds.w	r8, r2, r1
 80065c4:	4629      	mov	r1, r5
 80065c6:	eb43 0901 	adc.w	r9, r3, r1
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065de:	4690      	mov	r8, r2
 80065e0:	4699      	mov	r9, r3
 80065e2:	4623      	mov	r3, r4
 80065e4:	eb18 0303 	adds.w	r3, r8, r3
 80065e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065ec:	462b      	mov	r3, r5
 80065ee:	eb49 0303 	adc.w	r3, r9, r3
 80065f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006602:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800660a:	460b      	mov	r3, r1
 800660c:	18db      	adds	r3, r3, r3
 800660e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006610:	4613      	mov	r3, r2
 8006612:	eb42 0303 	adc.w	r3, r2, r3
 8006616:	657b      	str	r3, [r7, #84]	@ 0x54
 8006618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800661c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006620:	f7f9 fe4e 	bl	80002c0 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4b61      	ldr	r3, [pc, #388]	@ (80067b0 <UART_SetConfig+0x2d4>)
 800662a:	fba3 2302 	umull	r2, r3, r3, r2
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	011c      	lsls	r4, r3, #4
 8006632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800663c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006644:	4642      	mov	r2, r8
 8006646:	464b      	mov	r3, r9
 8006648:	1891      	adds	r1, r2, r2
 800664a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800664c:	415b      	adcs	r3, r3
 800664e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006654:	4641      	mov	r1, r8
 8006656:	eb12 0a01 	adds.w	sl, r2, r1
 800665a:	4649      	mov	r1, r9
 800665c:	eb43 0b01 	adc.w	fp, r3, r1
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	f04f 0300 	mov.w	r3, #0
 8006668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800666c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006674:	4692      	mov	sl, r2
 8006676:	469b      	mov	fp, r3
 8006678:	4643      	mov	r3, r8
 800667a:	eb1a 0303 	adds.w	r3, sl, r3
 800667e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006682:	464b      	mov	r3, r9
 8006684:	eb4b 0303 	adc.w	r3, fp, r3
 8006688:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006698:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800669c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066a0:	460b      	mov	r3, r1
 80066a2:	18db      	adds	r3, r3, r3
 80066a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066a6:	4613      	mov	r3, r2
 80066a8:	eb42 0303 	adc.w	r3, r2, r3
 80066ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066b6:	f7f9 fe03 	bl	80002c0 <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	4b3b      	ldr	r3, [pc, #236]	@ (80067b0 <UART_SetConfig+0x2d4>)
 80066c2:	fba3 2301 	umull	r2, r3, r3, r1
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	2264      	movs	r2, #100	@ 0x64
 80066ca:	fb02 f303 	mul.w	r3, r2, r3
 80066ce:	1acb      	subs	r3, r1, r3
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066d6:	4b36      	ldr	r3, [pc, #216]	@ (80067b0 <UART_SetConfig+0x2d4>)
 80066d8:	fba3 2302 	umull	r2, r3, r3, r2
 80066dc:	095b      	lsrs	r3, r3, #5
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066e4:	441c      	add	r4, r3
 80066e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	1891      	adds	r1, r2, r2
 80066fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006700:	415b      	adcs	r3, r3
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006708:	4641      	mov	r1, r8
 800670a:	1851      	adds	r1, r2, r1
 800670c:	6339      	str	r1, [r7, #48]	@ 0x30
 800670e:	4649      	mov	r1, r9
 8006710:	414b      	adcs	r3, r1
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006720:	4659      	mov	r1, fp
 8006722:	00cb      	lsls	r3, r1, #3
 8006724:	4651      	mov	r1, sl
 8006726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800672a:	4651      	mov	r1, sl
 800672c:	00ca      	lsls	r2, r1, #3
 800672e:	4610      	mov	r0, r2
 8006730:	4619      	mov	r1, r3
 8006732:	4603      	mov	r3, r0
 8006734:	4642      	mov	r2, r8
 8006736:	189b      	adds	r3, r3, r2
 8006738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800673c:	464b      	mov	r3, r9
 800673e:	460a      	mov	r2, r1
 8006740:	eb42 0303 	adc.w	r3, r2, r3
 8006744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006754:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800675c:	460b      	mov	r3, r1
 800675e:	18db      	adds	r3, r3, r3
 8006760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006762:	4613      	mov	r3, r2
 8006764:	eb42 0303 	adc.w	r3, r2, r3
 8006768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800676a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800676e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006772:	f7f9 fda5 	bl	80002c0 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <UART_SetConfig+0x2d4>)
 800677c:	fba3 1302 	umull	r1, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	2164      	movs	r1, #100	@ 0x64
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	3332      	adds	r3, #50	@ 0x32
 800678e:	4a08      	ldr	r2, [pc, #32]	@ (80067b0 <UART_SetConfig+0x2d4>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	f003 0207 	and.w	r2, r3, #7
 800679a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4422      	add	r2, r4
 80067a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067a4:	e106      	b.n	80069b4 <UART_SetConfig+0x4d8>
 80067a6:	bf00      	nop
 80067a8:	40011000 	.word	0x40011000
 80067ac:	40011400 	.word	0x40011400
 80067b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	1891      	adds	r1, r2, r2
 80067cc:	6239      	str	r1, [r7, #32]
 80067ce:	415b      	adcs	r3, r3
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067d6:	4641      	mov	r1, r8
 80067d8:	1854      	adds	r4, r2, r1
 80067da:	4649      	mov	r1, r9
 80067dc:	eb43 0501 	adc.w	r5, r3, r1
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	00eb      	lsls	r3, r5, #3
 80067ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ee:	00e2      	lsls	r2, r4, #3
 80067f0:	4614      	mov	r4, r2
 80067f2:	461d      	mov	r5, r3
 80067f4:	4643      	mov	r3, r8
 80067f6:	18e3      	adds	r3, r4, r3
 80067f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067fc:	464b      	mov	r3, r9
 80067fe:	eb45 0303 	adc.w	r3, r5, r3
 8006802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006812:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006822:	4629      	mov	r1, r5
 8006824:	008b      	lsls	r3, r1, #2
 8006826:	4621      	mov	r1, r4
 8006828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800682c:	4621      	mov	r1, r4
 800682e:	008a      	lsls	r2, r1, #2
 8006830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006834:	f7f9 fd44 	bl	80002c0 <__aeabi_uldivmod>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4b60      	ldr	r3, [pc, #384]	@ (80069c0 <UART_SetConfig+0x4e4>)
 800683e:	fba3 2302 	umull	r2, r3, r3, r2
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	011c      	lsls	r4, r3, #4
 8006846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006850:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006858:	4642      	mov	r2, r8
 800685a:	464b      	mov	r3, r9
 800685c:	1891      	adds	r1, r2, r2
 800685e:	61b9      	str	r1, [r7, #24]
 8006860:	415b      	adcs	r3, r3
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006868:	4641      	mov	r1, r8
 800686a:	1851      	adds	r1, r2, r1
 800686c:	6139      	str	r1, [r7, #16]
 800686e:	4649      	mov	r1, r9
 8006870:	414b      	adcs	r3, r1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006880:	4659      	mov	r1, fp
 8006882:	00cb      	lsls	r3, r1, #3
 8006884:	4651      	mov	r1, sl
 8006886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800688a:	4651      	mov	r1, sl
 800688c:	00ca      	lsls	r2, r1, #3
 800688e:	4610      	mov	r0, r2
 8006890:	4619      	mov	r1, r3
 8006892:	4603      	mov	r3, r0
 8006894:	4642      	mov	r2, r8
 8006896:	189b      	adds	r3, r3, r2
 8006898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800689c:	464b      	mov	r3, r9
 800689e:	460a      	mov	r2, r1
 80068a0:	eb42 0303 	adc.w	r3, r2, r3
 80068a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068c0:	4649      	mov	r1, r9
 80068c2:	008b      	lsls	r3, r1, #2
 80068c4:	4641      	mov	r1, r8
 80068c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ca:	4641      	mov	r1, r8
 80068cc:	008a      	lsls	r2, r1, #2
 80068ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068d2:	f7f9 fcf5 	bl	80002c0 <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	4b38      	ldr	r3, [pc, #224]	@ (80069c0 <UART_SetConfig+0x4e4>)
 80068de:	fba3 2301 	umull	r2, r3, r3, r1
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	2264      	movs	r2, #100	@ 0x64
 80068e6:	fb02 f303 	mul.w	r3, r2, r3
 80068ea:	1acb      	subs	r3, r1, r3
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	3332      	adds	r3, #50	@ 0x32
 80068f0:	4a33      	ldr	r2, [pc, #204]	@ (80069c0 <UART_SetConfig+0x4e4>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068fc:	441c      	add	r4, r3
 80068fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006902:	2200      	movs	r2, #0
 8006904:	673b      	str	r3, [r7, #112]	@ 0x70
 8006906:	677a      	str	r2, [r7, #116]	@ 0x74
 8006908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800690c:	4642      	mov	r2, r8
 800690e:	464b      	mov	r3, r9
 8006910:	1891      	adds	r1, r2, r2
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	415b      	adcs	r3, r3
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800691c:	4641      	mov	r1, r8
 800691e:	1851      	adds	r1, r2, r1
 8006920:	6039      	str	r1, [r7, #0]
 8006922:	4649      	mov	r1, r9
 8006924:	414b      	adcs	r3, r1
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006934:	4659      	mov	r1, fp
 8006936:	00cb      	lsls	r3, r1, #3
 8006938:	4651      	mov	r1, sl
 800693a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693e:	4651      	mov	r1, sl
 8006940:	00ca      	lsls	r2, r1, #3
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	4603      	mov	r3, r0
 8006948:	4642      	mov	r2, r8
 800694a:	189b      	adds	r3, r3, r2
 800694c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800694e:	464b      	mov	r3, r9
 8006950:	460a      	mov	r2, r1
 8006952:	eb42 0303 	adc.w	r3, r2, r3
 8006956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	663b      	str	r3, [r7, #96]	@ 0x60
 8006962:	667a      	str	r2, [r7, #100]	@ 0x64
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006970:	4649      	mov	r1, r9
 8006972:	008b      	lsls	r3, r1, #2
 8006974:	4641      	mov	r1, r8
 8006976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800697a:	4641      	mov	r1, r8
 800697c:	008a      	lsls	r2, r1, #2
 800697e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006982:	f7f9 fc9d 	bl	80002c0 <__aeabi_uldivmod>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <UART_SetConfig+0x4e4>)
 800698c:	fba3 1302 	umull	r1, r3, r3, r2
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	2164      	movs	r1, #100	@ 0x64
 8006994:	fb01 f303 	mul.w	r3, r1, r3
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	3332      	adds	r3, #50	@ 0x32
 800699e:	4a08      	ldr	r2, [pc, #32]	@ (80069c0 <UART_SetConfig+0x4e4>)
 80069a0:	fba2 2303 	umull	r2, r3, r2, r3
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f003 020f 	and.w	r2, r3, #15
 80069aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4422      	add	r2, r4
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ba:	46bd      	mov	sp, r7
 80069bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069c0:	51eb851f 	.word	0x51eb851f

080069c4 <siprintf>:
 80069c4:	b40e      	push	{r1, r2, r3}
 80069c6:	b510      	push	{r4, lr}
 80069c8:	b09d      	sub	sp, #116	@ 0x74
 80069ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80069cc:	9002      	str	r0, [sp, #8]
 80069ce:	9006      	str	r0, [sp, #24]
 80069d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069d4:	480a      	ldr	r0, [pc, #40]	@ (8006a00 <siprintf+0x3c>)
 80069d6:	9107      	str	r1, [sp, #28]
 80069d8:	9104      	str	r1, [sp, #16]
 80069da:	490a      	ldr	r1, [pc, #40]	@ (8006a04 <siprintf+0x40>)
 80069dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e0:	9105      	str	r1, [sp, #20]
 80069e2:	2400      	movs	r4, #0
 80069e4:	a902      	add	r1, sp, #8
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80069ec:	f000 f9ae 	bl	8006d4c <_svfiprintf_r>
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	701c      	strb	r4, [r3, #0]
 80069f4:	b01d      	add	sp, #116	@ 0x74
 80069f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fa:	b003      	add	sp, #12
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000014 	.word	0x20000014
 8006a04:	ffff0208 	.word	0xffff0208

08006a08 <memset>:
 8006a08:	4402      	add	r2, r0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d100      	bne.n	8006a12 <memset+0xa>
 8006a10:	4770      	bx	lr
 8006a12:	f803 1b01 	strb.w	r1, [r3], #1
 8006a16:	e7f9      	b.n	8006a0c <memset+0x4>

08006a18 <strncmp>:
 8006a18:	b510      	push	{r4, lr}
 8006a1a:	b16a      	cbz	r2, 8006a38 <strncmp+0x20>
 8006a1c:	3901      	subs	r1, #1
 8006a1e:	1884      	adds	r4, r0, r2
 8006a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a24:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d103      	bne.n	8006a34 <strncmp+0x1c>
 8006a2c:	42a0      	cmp	r0, r4
 8006a2e:	d001      	beq.n	8006a34 <strncmp+0x1c>
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d1f5      	bne.n	8006a20 <strncmp+0x8>
 8006a34:	1ad0      	subs	r0, r2, r3
 8006a36:	bd10      	pop	{r4, pc}
 8006a38:	4610      	mov	r0, r2
 8006a3a:	e7fc      	b.n	8006a36 <strncmp+0x1e>

08006a3c <__errno>:
 8006a3c:	4b01      	ldr	r3, [pc, #4]	@ (8006a44 <__errno+0x8>)
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000014 	.word	0x20000014

08006a48 <__libc_init_array>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8006a80 <__libc_init_array+0x38>)
 8006a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8006a84 <__libc_init_array+0x3c>)
 8006a4e:	1b64      	subs	r4, r4, r5
 8006a50:	10a4      	asrs	r4, r4, #2
 8006a52:	2600      	movs	r6, #0
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d109      	bne.n	8006a6c <__libc_init_array+0x24>
 8006a58:	4d0b      	ldr	r5, [pc, #44]	@ (8006a88 <__libc_init_array+0x40>)
 8006a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8006a8c <__libc_init_array+0x44>)
 8006a5c:	f000 fc6c 	bl	8007338 <_init>
 8006a60:	1b64      	subs	r4, r4, r5
 8006a62:	10a4      	asrs	r4, r4, #2
 8006a64:	2600      	movs	r6, #0
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	d105      	bne.n	8006a76 <__libc_init_array+0x2e>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a70:	4798      	blx	r3
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7ee      	b.n	8006a54 <__libc_init_array+0xc>
 8006a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7a:	4798      	blx	r3
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	e7f2      	b.n	8006a66 <__libc_init_array+0x1e>
 8006a80:	080081d4 	.word	0x080081d4
 8006a84:	080081d4 	.word	0x080081d4
 8006a88:	080081d4 	.word	0x080081d4
 8006a8c:	080081d8 	.word	0x080081d8

08006a90 <__retarget_lock_acquire_recursive>:
 8006a90:	4770      	bx	lr

08006a92 <__retarget_lock_release_recursive>:
 8006a92:	4770      	bx	lr

08006a94 <strcpy>:
 8006a94:	4603      	mov	r3, r0
 8006a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a9a:	f803 2b01 	strb.w	r2, [r3], #1
 8006a9e:	2a00      	cmp	r2, #0
 8006aa0:	d1f9      	bne.n	8006a96 <strcpy+0x2>
 8006aa2:	4770      	bx	lr

08006aa4 <_free_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	4605      	mov	r5, r0
 8006aa8:	2900      	cmp	r1, #0
 8006aaa:	d041      	beq.n	8006b30 <_free_r+0x8c>
 8006aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab0:	1f0c      	subs	r4, r1, #4
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bfb8      	it	lt
 8006ab6:	18e4      	addlt	r4, r4, r3
 8006ab8:	f000 f8e0 	bl	8006c7c <__malloc_lock>
 8006abc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b34 <_free_r+0x90>)
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	b933      	cbnz	r3, 8006ad0 <_free_r+0x2c>
 8006ac2:	6063      	str	r3, [r4, #4]
 8006ac4:	6014      	str	r4, [r2, #0]
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006acc:	f000 b8dc 	b.w	8006c88 <__malloc_unlock>
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	d908      	bls.n	8006ae6 <_free_r+0x42>
 8006ad4:	6820      	ldr	r0, [r4, #0]
 8006ad6:	1821      	adds	r1, r4, r0
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	bf01      	itttt	eq
 8006adc:	6819      	ldreq	r1, [r3, #0]
 8006ade:	685b      	ldreq	r3, [r3, #4]
 8006ae0:	1809      	addeq	r1, r1, r0
 8006ae2:	6021      	streq	r1, [r4, #0]
 8006ae4:	e7ed      	b.n	8006ac2 <_free_r+0x1e>
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	b10b      	cbz	r3, 8006af0 <_free_r+0x4c>
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d9fa      	bls.n	8006ae6 <_free_r+0x42>
 8006af0:	6811      	ldr	r1, [r2, #0]
 8006af2:	1850      	adds	r0, r2, r1
 8006af4:	42a0      	cmp	r0, r4
 8006af6:	d10b      	bne.n	8006b10 <_free_r+0x6c>
 8006af8:	6820      	ldr	r0, [r4, #0]
 8006afa:	4401      	add	r1, r0
 8006afc:	1850      	adds	r0, r2, r1
 8006afe:	4283      	cmp	r3, r0
 8006b00:	6011      	str	r1, [r2, #0]
 8006b02:	d1e0      	bne.n	8006ac6 <_free_r+0x22>
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	6053      	str	r3, [r2, #4]
 8006b0a:	4408      	add	r0, r1
 8006b0c:	6010      	str	r0, [r2, #0]
 8006b0e:	e7da      	b.n	8006ac6 <_free_r+0x22>
 8006b10:	d902      	bls.n	8006b18 <_free_r+0x74>
 8006b12:	230c      	movs	r3, #12
 8006b14:	602b      	str	r3, [r5, #0]
 8006b16:	e7d6      	b.n	8006ac6 <_free_r+0x22>
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	1821      	adds	r1, r4, r0
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf04      	itt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	6063      	str	r3, [r4, #4]
 8006b26:	bf04      	itt	eq
 8006b28:	1809      	addeq	r1, r1, r0
 8006b2a:	6021      	streq	r1, [r4, #0]
 8006b2c:	6054      	str	r4, [r2, #4]
 8006b2e:	e7ca      	b.n	8006ac6 <_free_r+0x22>
 8006b30:	bd38      	pop	{r3, r4, r5, pc}
 8006b32:	bf00      	nop
 8006b34:	20000784 	.word	0x20000784

08006b38 <sbrk_aligned>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006b78 <sbrk_aligned+0x40>)
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	6831      	ldr	r1, [r6, #0]
 8006b40:	4605      	mov	r5, r0
 8006b42:	b911      	cbnz	r1, 8006b4a <sbrk_aligned+0x12>
 8006b44:	f000 fba4 	bl	8007290 <_sbrk_r>
 8006b48:	6030      	str	r0, [r6, #0]
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 fb9f 	bl	8007290 <_sbrk_r>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d103      	bne.n	8006b5e <sbrk_aligned+0x26>
 8006b56:	f04f 34ff 	mov.w	r4, #4294967295
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	bd70      	pop	{r4, r5, r6, pc}
 8006b5e:	1cc4      	adds	r4, r0, #3
 8006b60:	f024 0403 	bic.w	r4, r4, #3
 8006b64:	42a0      	cmp	r0, r4
 8006b66:	d0f8      	beq.n	8006b5a <sbrk_aligned+0x22>
 8006b68:	1a21      	subs	r1, r4, r0
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 fb90 	bl	8007290 <_sbrk_r>
 8006b70:	3001      	adds	r0, #1
 8006b72:	d1f2      	bne.n	8006b5a <sbrk_aligned+0x22>
 8006b74:	e7ef      	b.n	8006b56 <sbrk_aligned+0x1e>
 8006b76:	bf00      	nop
 8006b78:	20000780 	.word	0x20000780

08006b7c <_malloc_r>:
 8006b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b80:	1ccd      	adds	r5, r1, #3
 8006b82:	f025 0503 	bic.w	r5, r5, #3
 8006b86:	3508      	adds	r5, #8
 8006b88:	2d0c      	cmp	r5, #12
 8006b8a:	bf38      	it	cc
 8006b8c:	250c      	movcc	r5, #12
 8006b8e:	2d00      	cmp	r5, #0
 8006b90:	4606      	mov	r6, r0
 8006b92:	db01      	blt.n	8006b98 <_malloc_r+0x1c>
 8006b94:	42a9      	cmp	r1, r5
 8006b96:	d904      	bls.n	8006ba2 <_malloc_r+0x26>
 8006b98:	230c      	movs	r3, #12
 8006b9a:	6033      	str	r3, [r6, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c78 <_malloc_r+0xfc>
 8006ba6:	f000 f869 	bl	8006c7c <__malloc_lock>
 8006baa:	f8d8 3000 	ldr.w	r3, [r8]
 8006bae:	461c      	mov	r4, r3
 8006bb0:	bb44      	cbnz	r4, 8006c04 <_malloc_r+0x88>
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7ff ffbf 	bl	8006b38 <sbrk_aligned>
 8006bba:	1c43      	adds	r3, r0, #1
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	d158      	bne.n	8006c72 <_malloc_r+0xf6>
 8006bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8006bc4:	4627      	mov	r7, r4
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	d143      	bne.n	8006c52 <_malloc_r+0xd6>
 8006bca:	2c00      	cmp	r4, #0
 8006bcc:	d04b      	beq.n	8006c66 <_malloc_r+0xea>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	eb04 0903 	add.w	r9, r4, r3
 8006bd8:	f000 fb5a 	bl	8007290 <_sbrk_r>
 8006bdc:	4581      	cmp	r9, r0
 8006bde:	d142      	bne.n	8006c66 <_malloc_r+0xea>
 8006be0:	6821      	ldr	r1, [r4, #0]
 8006be2:	1a6d      	subs	r5, r5, r1
 8006be4:	4629      	mov	r1, r5
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7ff ffa6 	bl	8006b38 <sbrk_aligned>
 8006bec:	3001      	adds	r0, #1
 8006bee:	d03a      	beq.n	8006c66 <_malloc_r+0xea>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	442b      	add	r3, r5
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	bb62      	cbnz	r2, 8006c58 <_malloc_r+0xdc>
 8006bfe:	f8c8 7000 	str.w	r7, [r8]
 8006c02:	e00f      	b.n	8006c24 <_malloc_r+0xa8>
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	1b52      	subs	r2, r2, r5
 8006c08:	d420      	bmi.n	8006c4c <_malloc_r+0xd0>
 8006c0a:	2a0b      	cmp	r2, #11
 8006c0c:	d917      	bls.n	8006c3e <_malloc_r+0xc2>
 8006c0e:	1961      	adds	r1, r4, r5
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	6025      	str	r5, [r4, #0]
 8006c14:	bf18      	it	ne
 8006c16:	6059      	strne	r1, [r3, #4]
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	bf08      	it	eq
 8006c1c:	f8c8 1000 	streq.w	r1, [r8]
 8006c20:	5162      	str	r2, [r4, r5]
 8006c22:	604b      	str	r3, [r1, #4]
 8006c24:	4630      	mov	r0, r6
 8006c26:	f000 f82f 	bl	8006c88 <__malloc_unlock>
 8006c2a:	f104 000b 	add.w	r0, r4, #11
 8006c2e:	1d23      	adds	r3, r4, #4
 8006c30:	f020 0007 	bic.w	r0, r0, #7
 8006c34:	1ac2      	subs	r2, r0, r3
 8006c36:	bf1c      	itt	ne
 8006c38:	1a1b      	subne	r3, r3, r0
 8006c3a:	50a3      	strne	r3, [r4, r2]
 8006c3c:	e7af      	b.n	8006b9e <_malloc_r+0x22>
 8006c3e:	6862      	ldr	r2, [r4, #4]
 8006c40:	42a3      	cmp	r3, r4
 8006c42:	bf0c      	ite	eq
 8006c44:	f8c8 2000 	streq.w	r2, [r8]
 8006c48:	605a      	strne	r2, [r3, #4]
 8006c4a:	e7eb      	b.n	8006c24 <_malloc_r+0xa8>
 8006c4c:	4623      	mov	r3, r4
 8006c4e:	6864      	ldr	r4, [r4, #4]
 8006c50:	e7ae      	b.n	8006bb0 <_malloc_r+0x34>
 8006c52:	463c      	mov	r4, r7
 8006c54:	687f      	ldr	r7, [r7, #4]
 8006c56:	e7b6      	b.n	8006bc6 <_malloc_r+0x4a>
 8006c58:	461a      	mov	r2, r3
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	d1fb      	bne.n	8006c58 <_malloc_r+0xdc>
 8006c60:	2300      	movs	r3, #0
 8006c62:	6053      	str	r3, [r2, #4]
 8006c64:	e7de      	b.n	8006c24 <_malloc_r+0xa8>
 8006c66:	230c      	movs	r3, #12
 8006c68:	6033      	str	r3, [r6, #0]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f80c 	bl	8006c88 <__malloc_unlock>
 8006c70:	e794      	b.n	8006b9c <_malloc_r+0x20>
 8006c72:	6005      	str	r5, [r0, #0]
 8006c74:	e7d6      	b.n	8006c24 <_malloc_r+0xa8>
 8006c76:	bf00      	nop
 8006c78:	20000784 	.word	0x20000784

08006c7c <__malloc_lock>:
 8006c7c:	4801      	ldr	r0, [pc, #4]	@ (8006c84 <__malloc_lock+0x8>)
 8006c7e:	f7ff bf07 	b.w	8006a90 <__retarget_lock_acquire_recursive>
 8006c82:	bf00      	nop
 8006c84:	2000077c 	.word	0x2000077c

08006c88 <__malloc_unlock>:
 8006c88:	4801      	ldr	r0, [pc, #4]	@ (8006c90 <__malloc_unlock+0x8>)
 8006c8a:	f7ff bf02 	b.w	8006a92 <__retarget_lock_release_recursive>
 8006c8e:	bf00      	nop
 8006c90:	2000077c 	.word	0x2000077c

08006c94 <__ssputs_r>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	688e      	ldr	r6, [r1, #8]
 8006c9a:	461f      	mov	r7, r3
 8006c9c:	42be      	cmp	r6, r7
 8006c9e:	680b      	ldr	r3, [r1, #0]
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	4690      	mov	r8, r2
 8006ca6:	d82d      	bhi.n	8006d04 <__ssputs_r+0x70>
 8006ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cb0:	d026      	beq.n	8006d00 <__ssputs_r+0x6c>
 8006cb2:	6965      	ldr	r5, [r4, #20]
 8006cb4:	6909      	ldr	r1, [r1, #16]
 8006cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cba:	eba3 0901 	sub.w	r9, r3, r1
 8006cbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cc2:	1c7b      	adds	r3, r7, #1
 8006cc4:	444b      	add	r3, r9
 8006cc6:	106d      	asrs	r5, r5, #1
 8006cc8:	429d      	cmp	r5, r3
 8006cca:	bf38      	it	cc
 8006ccc:	461d      	movcc	r5, r3
 8006cce:	0553      	lsls	r3, r2, #21
 8006cd0:	d527      	bpl.n	8006d22 <__ssputs_r+0x8e>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	f7ff ff52 	bl	8006b7c <_malloc_r>
 8006cd8:	4606      	mov	r6, r0
 8006cda:	b360      	cbz	r0, 8006d36 <__ssputs_r+0xa2>
 8006cdc:	6921      	ldr	r1, [r4, #16]
 8006cde:	464a      	mov	r2, r9
 8006ce0:	f000 fae6 	bl	80072b0 <memcpy>
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	6126      	str	r6, [r4, #16]
 8006cf2:	6165      	str	r5, [r4, #20]
 8006cf4:	444e      	add	r6, r9
 8006cf6:	eba5 0509 	sub.w	r5, r5, r9
 8006cfa:	6026      	str	r6, [r4, #0]
 8006cfc:	60a5      	str	r5, [r4, #8]
 8006cfe:	463e      	mov	r6, r7
 8006d00:	42be      	cmp	r6, r7
 8006d02:	d900      	bls.n	8006d06 <__ssputs_r+0x72>
 8006d04:	463e      	mov	r6, r7
 8006d06:	6820      	ldr	r0, [r4, #0]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	4641      	mov	r1, r8
 8006d0c:	f000 faa6 	bl	800725c <memmove>
 8006d10:	68a3      	ldr	r3, [r4, #8]
 8006d12:	1b9b      	subs	r3, r3, r6
 8006d14:	60a3      	str	r3, [r4, #8]
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	4433      	add	r3, r6
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d22:	462a      	mov	r2, r5
 8006d24:	f000 fad2 	bl	80072cc <_realloc_r>
 8006d28:	4606      	mov	r6, r0
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d1e0      	bne.n	8006cf0 <__ssputs_r+0x5c>
 8006d2e:	6921      	ldr	r1, [r4, #16]
 8006d30:	4650      	mov	r0, sl
 8006d32:	f7ff feb7 	bl	8006aa4 <_free_r>
 8006d36:	230c      	movs	r3, #12
 8006d38:	f8ca 3000 	str.w	r3, [sl]
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d42:	81a3      	strh	r3, [r4, #12]
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	e7e9      	b.n	8006d1e <__ssputs_r+0x8a>
	...

08006d4c <_svfiprintf_r>:
 8006d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d50:	4698      	mov	r8, r3
 8006d52:	898b      	ldrh	r3, [r1, #12]
 8006d54:	061b      	lsls	r3, r3, #24
 8006d56:	b09d      	sub	sp, #116	@ 0x74
 8006d58:	4607      	mov	r7, r0
 8006d5a:	460d      	mov	r5, r1
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	d510      	bpl.n	8006d82 <_svfiprintf_r+0x36>
 8006d60:	690b      	ldr	r3, [r1, #16]
 8006d62:	b973      	cbnz	r3, 8006d82 <_svfiprintf_r+0x36>
 8006d64:	2140      	movs	r1, #64	@ 0x40
 8006d66:	f7ff ff09 	bl	8006b7c <_malloc_r>
 8006d6a:	6028      	str	r0, [r5, #0]
 8006d6c:	6128      	str	r0, [r5, #16]
 8006d6e:	b930      	cbnz	r0, 8006d7e <_svfiprintf_r+0x32>
 8006d70:	230c      	movs	r3, #12
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295
 8006d78:	b01d      	add	sp, #116	@ 0x74
 8006d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7e:	2340      	movs	r3, #64	@ 0x40
 8006d80:	616b      	str	r3, [r5, #20]
 8006d82:	2300      	movs	r3, #0
 8006d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d86:	2320      	movs	r3, #32
 8006d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d90:	2330      	movs	r3, #48	@ 0x30
 8006d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f30 <_svfiprintf_r+0x1e4>
 8006d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d9a:	f04f 0901 	mov.w	r9, #1
 8006d9e:	4623      	mov	r3, r4
 8006da0:	469a      	mov	sl, r3
 8006da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006da6:	b10a      	cbz	r2, 8006dac <_svfiprintf_r+0x60>
 8006da8:	2a25      	cmp	r2, #37	@ 0x25
 8006daa:	d1f9      	bne.n	8006da0 <_svfiprintf_r+0x54>
 8006dac:	ebba 0b04 	subs.w	fp, sl, r4
 8006db0:	d00b      	beq.n	8006dca <_svfiprintf_r+0x7e>
 8006db2:	465b      	mov	r3, fp
 8006db4:	4622      	mov	r2, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	4638      	mov	r0, r7
 8006dba:	f7ff ff6b 	bl	8006c94 <__ssputs_r>
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	f000 80a7 	beq.w	8006f12 <_svfiprintf_r+0x1c6>
 8006dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dc6:	445a      	add	r2, fp
 8006dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dca:	f89a 3000 	ldrb.w	r3, [sl]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 809f 	beq.w	8006f12 <_svfiprintf_r+0x1c6>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dde:	f10a 0a01 	add.w	sl, sl, #1
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	9307      	str	r3, [sp, #28]
 8006de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dec:	4654      	mov	r4, sl
 8006dee:	2205      	movs	r2, #5
 8006df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df4:	484e      	ldr	r0, [pc, #312]	@ (8006f30 <_svfiprintf_r+0x1e4>)
 8006df6:	f7f9 fa13 	bl	8000220 <memchr>
 8006dfa:	9a04      	ldr	r2, [sp, #16]
 8006dfc:	b9d8      	cbnz	r0, 8006e36 <_svfiprintf_r+0xea>
 8006dfe:	06d0      	lsls	r0, r2, #27
 8006e00:	bf44      	itt	mi
 8006e02:	2320      	movmi	r3, #32
 8006e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e08:	0711      	lsls	r1, r2, #28
 8006e0a:	bf44      	itt	mi
 8006e0c:	232b      	movmi	r3, #43	@ 0x2b
 8006e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e12:	f89a 3000 	ldrb.w	r3, [sl]
 8006e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e18:	d015      	beq.n	8006e46 <_svfiprintf_r+0xfa>
 8006e1a:	9a07      	ldr	r2, [sp, #28]
 8006e1c:	4654      	mov	r4, sl
 8006e1e:	2000      	movs	r0, #0
 8006e20:	f04f 0c0a 	mov.w	ip, #10
 8006e24:	4621      	mov	r1, r4
 8006e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e2a:	3b30      	subs	r3, #48	@ 0x30
 8006e2c:	2b09      	cmp	r3, #9
 8006e2e:	d94b      	bls.n	8006ec8 <_svfiprintf_r+0x17c>
 8006e30:	b1b0      	cbz	r0, 8006e60 <_svfiprintf_r+0x114>
 8006e32:	9207      	str	r2, [sp, #28]
 8006e34:	e014      	b.n	8006e60 <_svfiprintf_r+0x114>
 8006e36:	eba0 0308 	sub.w	r3, r0, r8
 8006e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	9304      	str	r3, [sp, #16]
 8006e42:	46a2      	mov	sl, r4
 8006e44:	e7d2      	b.n	8006dec <_svfiprintf_r+0xa0>
 8006e46:	9b03      	ldr	r3, [sp, #12]
 8006e48:	1d19      	adds	r1, r3, #4
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	9103      	str	r1, [sp, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	bfbb      	ittet	lt
 8006e52:	425b      	neglt	r3, r3
 8006e54:	f042 0202 	orrlt.w	r2, r2, #2
 8006e58:	9307      	strge	r3, [sp, #28]
 8006e5a:	9307      	strlt	r3, [sp, #28]
 8006e5c:	bfb8      	it	lt
 8006e5e:	9204      	strlt	r2, [sp, #16]
 8006e60:	7823      	ldrb	r3, [r4, #0]
 8006e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e64:	d10a      	bne.n	8006e7c <_svfiprintf_r+0x130>
 8006e66:	7863      	ldrb	r3, [r4, #1]
 8006e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e6a:	d132      	bne.n	8006ed2 <_svfiprintf_r+0x186>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	1d1a      	adds	r2, r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	9203      	str	r2, [sp, #12]
 8006e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e78:	3402      	adds	r4, #2
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f40 <_svfiprintf_r+0x1f4>
 8006e80:	7821      	ldrb	r1, [r4, #0]
 8006e82:	2203      	movs	r2, #3
 8006e84:	4650      	mov	r0, sl
 8006e86:	f7f9 f9cb 	bl	8000220 <memchr>
 8006e8a:	b138      	cbz	r0, 8006e9c <_svfiprintf_r+0x150>
 8006e8c:	9b04      	ldr	r3, [sp, #16]
 8006e8e:	eba0 000a 	sub.w	r0, r0, sl
 8006e92:	2240      	movs	r2, #64	@ 0x40
 8006e94:	4082      	lsls	r2, r0
 8006e96:	4313      	orrs	r3, r2
 8006e98:	3401      	adds	r4, #1
 8006e9a:	9304      	str	r3, [sp, #16]
 8006e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea0:	4824      	ldr	r0, [pc, #144]	@ (8006f34 <_svfiprintf_r+0x1e8>)
 8006ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ea6:	2206      	movs	r2, #6
 8006ea8:	f7f9 f9ba 	bl	8000220 <memchr>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d036      	beq.n	8006f1e <_svfiprintf_r+0x1d2>
 8006eb0:	4b21      	ldr	r3, [pc, #132]	@ (8006f38 <_svfiprintf_r+0x1ec>)
 8006eb2:	bb1b      	cbnz	r3, 8006efc <_svfiprintf_r+0x1b0>
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	3307      	adds	r3, #7
 8006eb8:	f023 0307 	bic.w	r3, r3, #7
 8006ebc:	3308      	adds	r3, #8
 8006ebe:	9303      	str	r3, [sp, #12]
 8006ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec2:	4433      	add	r3, r6
 8006ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec6:	e76a      	b.n	8006d9e <_svfiprintf_r+0x52>
 8006ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ecc:	460c      	mov	r4, r1
 8006ece:	2001      	movs	r0, #1
 8006ed0:	e7a8      	b.n	8006e24 <_svfiprintf_r+0xd8>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	3401      	adds	r4, #1
 8006ed6:	9305      	str	r3, [sp, #20]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f04f 0c0a 	mov.w	ip, #10
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ee4:	3a30      	subs	r2, #48	@ 0x30
 8006ee6:	2a09      	cmp	r2, #9
 8006ee8:	d903      	bls.n	8006ef2 <_svfiprintf_r+0x1a6>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0c6      	beq.n	8006e7c <_svfiprintf_r+0x130>
 8006eee:	9105      	str	r1, [sp, #20]
 8006ef0:	e7c4      	b.n	8006e7c <_svfiprintf_r+0x130>
 8006ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e7f0      	b.n	8006ede <_svfiprintf_r+0x192>
 8006efc:	ab03      	add	r3, sp, #12
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	462a      	mov	r2, r5
 8006f02:	4b0e      	ldr	r3, [pc, #56]	@ (8006f3c <_svfiprintf_r+0x1f0>)
 8006f04:	a904      	add	r1, sp, #16
 8006f06:	4638      	mov	r0, r7
 8006f08:	f3af 8000 	nop.w
 8006f0c:	1c42      	adds	r2, r0, #1
 8006f0e:	4606      	mov	r6, r0
 8006f10:	d1d6      	bne.n	8006ec0 <_svfiprintf_r+0x174>
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	065b      	lsls	r3, r3, #25
 8006f16:	f53f af2d 	bmi.w	8006d74 <_svfiprintf_r+0x28>
 8006f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f1c:	e72c      	b.n	8006d78 <_svfiprintf_r+0x2c>
 8006f1e:	ab03      	add	r3, sp, #12
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	462a      	mov	r2, r5
 8006f24:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <_svfiprintf_r+0x1f0>)
 8006f26:	a904      	add	r1, sp, #16
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f000 f879 	bl	8007020 <_printf_i>
 8006f2e:	e7ed      	b.n	8006f0c <_svfiprintf_r+0x1c0>
 8006f30:	08008198 	.word	0x08008198
 8006f34:	080081a2 	.word	0x080081a2
 8006f38:	00000000 	.word	0x00000000
 8006f3c:	08006c95 	.word	0x08006c95
 8006f40:	0800819e 	.word	0x0800819e

08006f44 <_printf_common>:
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	4616      	mov	r6, r2
 8006f4a:	4698      	mov	r8, r3
 8006f4c:	688a      	ldr	r2, [r1, #8]
 8006f4e:	690b      	ldr	r3, [r1, #16]
 8006f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f54:	4293      	cmp	r3, r2
 8006f56:	bfb8      	it	lt
 8006f58:	4613      	movlt	r3, r2
 8006f5a:	6033      	str	r3, [r6, #0]
 8006f5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f60:	4607      	mov	r7, r0
 8006f62:	460c      	mov	r4, r1
 8006f64:	b10a      	cbz	r2, 8006f6a <_printf_common+0x26>
 8006f66:	3301      	adds	r3, #1
 8006f68:	6033      	str	r3, [r6, #0]
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	0699      	lsls	r1, r3, #26
 8006f6e:	bf42      	ittt	mi
 8006f70:	6833      	ldrmi	r3, [r6, #0]
 8006f72:	3302      	addmi	r3, #2
 8006f74:	6033      	strmi	r3, [r6, #0]
 8006f76:	6825      	ldr	r5, [r4, #0]
 8006f78:	f015 0506 	ands.w	r5, r5, #6
 8006f7c:	d106      	bne.n	8006f8c <_printf_common+0x48>
 8006f7e:	f104 0a19 	add.w	sl, r4, #25
 8006f82:	68e3      	ldr	r3, [r4, #12]
 8006f84:	6832      	ldr	r2, [r6, #0]
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	42ab      	cmp	r3, r5
 8006f8a:	dc26      	bgt.n	8006fda <_printf_common+0x96>
 8006f8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f90:	6822      	ldr	r2, [r4, #0]
 8006f92:	3b00      	subs	r3, #0
 8006f94:	bf18      	it	ne
 8006f96:	2301      	movne	r3, #1
 8006f98:	0692      	lsls	r2, r2, #26
 8006f9a:	d42b      	bmi.n	8006ff4 <_printf_common+0xb0>
 8006f9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	47c8      	blx	r9
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d01e      	beq.n	8006fe8 <_printf_common+0xa4>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	6922      	ldr	r2, [r4, #16]
 8006fae:	f003 0306 	and.w	r3, r3, #6
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	bf02      	ittt	eq
 8006fb6:	68e5      	ldreq	r5, [r4, #12]
 8006fb8:	6833      	ldreq	r3, [r6, #0]
 8006fba:	1aed      	subeq	r5, r5, r3
 8006fbc:	68a3      	ldr	r3, [r4, #8]
 8006fbe:	bf0c      	ite	eq
 8006fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fc4:	2500      	movne	r5, #0
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	bfc4      	itt	gt
 8006fca:	1a9b      	subgt	r3, r3, r2
 8006fcc:	18ed      	addgt	r5, r5, r3
 8006fce:	2600      	movs	r6, #0
 8006fd0:	341a      	adds	r4, #26
 8006fd2:	42b5      	cmp	r5, r6
 8006fd4:	d11a      	bne.n	800700c <_printf_common+0xc8>
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	e008      	b.n	8006fec <_printf_common+0xa8>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4652      	mov	r2, sl
 8006fde:	4641      	mov	r1, r8
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	47c8      	blx	r9
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	d103      	bne.n	8006ff0 <_printf_common+0xac>
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	e7c6      	b.n	8006f82 <_printf_common+0x3e>
 8006ff4:	18e1      	adds	r1, r4, r3
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	2030      	movs	r0, #48	@ 0x30
 8006ffa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ffe:	4422      	add	r2, r4
 8007000:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007004:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007008:	3302      	adds	r3, #2
 800700a:	e7c7      	b.n	8006f9c <_printf_common+0x58>
 800700c:	2301      	movs	r3, #1
 800700e:	4622      	mov	r2, r4
 8007010:	4641      	mov	r1, r8
 8007012:	4638      	mov	r0, r7
 8007014:	47c8      	blx	r9
 8007016:	3001      	adds	r0, #1
 8007018:	d0e6      	beq.n	8006fe8 <_printf_common+0xa4>
 800701a:	3601      	adds	r6, #1
 800701c:	e7d9      	b.n	8006fd2 <_printf_common+0x8e>
	...

08007020 <_printf_i>:
 8007020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	7e0f      	ldrb	r7, [r1, #24]
 8007026:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007028:	2f78      	cmp	r7, #120	@ 0x78
 800702a:	4691      	mov	r9, r2
 800702c:	4680      	mov	r8, r0
 800702e:	460c      	mov	r4, r1
 8007030:	469a      	mov	sl, r3
 8007032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007036:	d807      	bhi.n	8007048 <_printf_i+0x28>
 8007038:	2f62      	cmp	r7, #98	@ 0x62
 800703a:	d80a      	bhi.n	8007052 <_printf_i+0x32>
 800703c:	2f00      	cmp	r7, #0
 800703e:	f000 80d1 	beq.w	80071e4 <_printf_i+0x1c4>
 8007042:	2f58      	cmp	r7, #88	@ 0x58
 8007044:	f000 80b8 	beq.w	80071b8 <_printf_i+0x198>
 8007048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800704c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007050:	e03a      	b.n	80070c8 <_printf_i+0xa8>
 8007052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007056:	2b15      	cmp	r3, #21
 8007058:	d8f6      	bhi.n	8007048 <_printf_i+0x28>
 800705a:	a101      	add	r1, pc, #4	@ (adr r1, 8007060 <_printf_i+0x40>)
 800705c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007060:	080070b9 	.word	0x080070b9
 8007064:	080070cd 	.word	0x080070cd
 8007068:	08007049 	.word	0x08007049
 800706c:	08007049 	.word	0x08007049
 8007070:	08007049 	.word	0x08007049
 8007074:	08007049 	.word	0x08007049
 8007078:	080070cd 	.word	0x080070cd
 800707c:	08007049 	.word	0x08007049
 8007080:	08007049 	.word	0x08007049
 8007084:	08007049 	.word	0x08007049
 8007088:	08007049 	.word	0x08007049
 800708c:	080071cb 	.word	0x080071cb
 8007090:	080070f7 	.word	0x080070f7
 8007094:	08007185 	.word	0x08007185
 8007098:	08007049 	.word	0x08007049
 800709c:	08007049 	.word	0x08007049
 80070a0:	080071ed 	.word	0x080071ed
 80070a4:	08007049 	.word	0x08007049
 80070a8:	080070f7 	.word	0x080070f7
 80070ac:	08007049 	.word	0x08007049
 80070b0:	08007049 	.word	0x08007049
 80070b4:	0800718d 	.word	0x0800718d
 80070b8:	6833      	ldr	r3, [r6, #0]
 80070ba:	1d1a      	adds	r2, r3, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6032      	str	r2, [r6, #0]
 80070c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070c8:	2301      	movs	r3, #1
 80070ca:	e09c      	b.n	8007206 <_printf_i+0x1e6>
 80070cc:	6833      	ldr	r3, [r6, #0]
 80070ce:	6820      	ldr	r0, [r4, #0]
 80070d0:	1d19      	adds	r1, r3, #4
 80070d2:	6031      	str	r1, [r6, #0]
 80070d4:	0606      	lsls	r6, r0, #24
 80070d6:	d501      	bpl.n	80070dc <_printf_i+0xbc>
 80070d8:	681d      	ldr	r5, [r3, #0]
 80070da:	e003      	b.n	80070e4 <_printf_i+0xc4>
 80070dc:	0645      	lsls	r5, r0, #25
 80070de:	d5fb      	bpl.n	80070d8 <_printf_i+0xb8>
 80070e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070e4:	2d00      	cmp	r5, #0
 80070e6:	da03      	bge.n	80070f0 <_printf_i+0xd0>
 80070e8:	232d      	movs	r3, #45	@ 0x2d
 80070ea:	426d      	negs	r5, r5
 80070ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f0:	4858      	ldr	r0, [pc, #352]	@ (8007254 <_printf_i+0x234>)
 80070f2:	230a      	movs	r3, #10
 80070f4:	e011      	b.n	800711a <_printf_i+0xfa>
 80070f6:	6821      	ldr	r1, [r4, #0]
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	0608      	lsls	r0, r1, #24
 80070fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007100:	d402      	bmi.n	8007108 <_printf_i+0xe8>
 8007102:	0649      	lsls	r1, r1, #25
 8007104:	bf48      	it	mi
 8007106:	b2ad      	uxthmi	r5, r5
 8007108:	2f6f      	cmp	r7, #111	@ 0x6f
 800710a:	4852      	ldr	r0, [pc, #328]	@ (8007254 <_printf_i+0x234>)
 800710c:	6033      	str	r3, [r6, #0]
 800710e:	bf14      	ite	ne
 8007110:	230a      	movne	r3, #10
 8007112:	2308      	moveq	r3, #8
 8007114:	2100      	movs	r1, #0
 8007116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800711a:	6866      	ldr	r6, [r4, #4]
 800711c:	60a6      	str	r6, [r4, #8]
 800711e:	2e00      	cmp	r6, #0
 8007120:	db05      	blt.n	800712e <_printf_i+0x10e>
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	432e      	orrs	r6, r5
 8007126:	f021 0104 	bic.w	r1, r1, #4
 800712a:	6021      	str	r1, [r4, #0]
 800712c:	d04b      	beq.n	80071c6 <_printf_i+0x1a6>
 800712e:	4616      	mov	r6, r2
 8007130:	fbb5 f1f3 	udiv	r1, r5, r3
 8007134:	fb03 5711 	mls	r7, r3, r1, r5
 8007138:	5dc7      	ldrb	r7, [r0, r7]
 800713a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800713e:	462f      	mov	r7, r5
 8007140:	42bb      	cmp	r3, r7
 8007142:	460d      	mov	r5, r1
 8007144:	d9f4      	bls.n	8007130 <_printf_i+0x110>
 8007146:	2b08      	cmp	r3, #8
 8007148:	d10b      	bne.n	8007162 <_printf_i+0x142>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	07df      	lsls	r7, r3, #31
 800714e:	d508      	bpl.n	8007162 <_printf_i+0x142>
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	6861      	ldr	r1, [r4, #4]
 8007154:	4299      	cmp	r1, r3
 8007156:	bfde      	ittt	le
 8007158:	2330      	movle	r3, #48	@ 0x30
 800715a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800715e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007162:	1b92      	subs	r2, r2, r6
 8007164:	6122      	str	r2, [r4, #16]
 8007166:	f8cd a000 	str.w	sl, [sp]
 800716a:	464b      	mov	r3, r9
 800716c:	aa03      	add	r2, sp, #12
 800716e:	4621      	mov	r1, r4
 8007170:	4640      	mov	r0, r8
 8007172:	f7ff fee7 	bl	8006f44 <_printf_common>
 8007176:	3001      	adds	r0, #1
 8007178:	d14a      	bne.n	8007210 <_printf_i+0x1f0>
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	b004      	add	sp, #16
 8007180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	f043 0320 	orr.w	r3, r3, #32
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	4832      	ldr	r0, [pc, #200]	@ (8007258 <_printf_i+0x238>)
 800718e:	2778      	movs	r7, #120	@ 0x78
 8007190:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	6831      	ldr	r1, [r6, #0]
 8007198:	061f      	lsls	r7, r3, #24
 800719a:	f851 5b04 	ldr.w	r5, [r1], #4
 800719e:	d402      	bmi.n	80071a6 <_printf_i+0x186>
 80071a0:	065f      	lsls	r7, r3, #25
 80071a2:	bf48      	it	mi
 80071a4:	b2ad      	uxthmi	r5, r5
 80071a6:	6031      	str	r1, [r6, #0]
 80071a8:	07d9      	lsls	r1, r3, #31
 80071aa:	bf44      	itt	mi
 80071ac:	f043 0320 	orrmi.w	r3, r3, #32
 80071b0:	6023      	strmi	r3, [r4, #0]
 80071b2:	b11d      	cbz	r5, 80071bc <_printf_i+0x19c>
 80071b4:	2310      	movs	r3, #16
 80071b6:	e7ad      	b.n	8007114 <_printf_i+0xf4>
 80071b8:	4826      	ldr	r0, [pc, #152]	@ (8007254 <_printf_i+0x234>)
 80071ba:	e7e9      	b.n	8007190 <_printf_i+0x170>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	f023 0320 	bic.w	r3, r3, #32
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	e7f6      	b.n	80071b4 <_printf_i+0x194>
 80071c6:	4616      	mov	r6, r2
 80071c8:	e7bd      	b.n	8007146 <_printf_i+0x126>
 80071ca:	6833      	ldr	r3, [r6, #0]
 80071cc:	6825      	ldr	r5, [r4, #0]
 80071ce:	6961      	ldr	r1, [r4, #20]
 80071d0:	1d18      	adds	r0, r3, #4
 80071d2:	6030      	str	r0, [r6, #0]
 80071d4:	062e      	lsls	r6, r5, #24
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	d501      	bpl.n	80071de <_printf_i+0x1be>
 80071da:	6019      	str	r1, [r3, #0]
 80071dc:	e002      	b.n	80071e4 <_printf_i+0x1c4>
 80071de:	0668      	lsls	r0, r5, #25
 80071e0:	d5fb      	bpl.n	80071da <_printf_i+0x1ba>
 80071e2:	8019      	strh	r1, [r3, #0]
 80071e4:	2300      	movs	r3, #0
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	4616      	mov	r6, r2
 80071ea:	e7bc      	b.n	8007166 <_printf_i+0x146>
 80071ec:	6833      	ldr	r3, [r6, #0]
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	6032      	str	r2, [r6, #0]
 80071f2:	681e      	ldr	r6, [r3, #0]
 80071f4:	6862      	ldr	r2, [r4, #4]
 80071f6:	2100      	movs	r1, #0
 80071f8:	4630      	mov	r0, r6
 80071fa:	f7f9 f811 	bl	8000220 <memchr>
 80071fe:	b108      	cbz	r0, 8007204 <_printf_i+0x1e4>
 8007200:	1b80      	subs	r0, r0, r6
 8007202:	6060      	str	r0, [r4, #4]
 8007204:	6863      	ldr	r3, [r4, #4]
 8007206:	6123      	str	r3, [r4, #16]
 8007208:	2300      	movs	r3, #0
 800720a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800720e:	e7aa      	b.n	8007166 <_printf_i+0x146>
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	4632      	mov	r2, r6
 8007214:	4649      	mov	r1, r9
 8007216:	4640      	mov	r0, r8
 8007218:	47d0      	blx	sl
 800721a:	3001      	adds	r0, #1
 800721c:	d0ad      	beq.n	800717a <_printf_i+0x15a>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	079b      	lsls	r3, r3, #30
 8007222:	d413      	bmi.n	800724c <_printf_i+0x22c>
 8007224:	68e0      	ldr	r0, [r4, #12]
 8007226:	9b03      	ldr	r3, [sp, #12]
 8007228:	4298      	cmp	r0, r3
 800722a:	bfb8      	it	lt
 800722c:	4618      	movlt	r0, r3
 800722e:	e7a6      	b.n	800717e <_printf_i+0x15e>
 8007230:	2301      	movs	r3, #1
 8007232:	4632      	mov	r2, r6
 8007234:	4649      	mov	r1, r9
 8007236:	4640      	mov	r0, r8
 8007238:	47d0      	blx	sl
 800723a:	3001      	adds	r0, #1
 800723c:	d09d      	beq.n	800717a <_printf_i+0x15a>
 800723e:	3501      	adds	r5, #1
 8007240:	68e3      	ldr	r3, [r4, #12]
 8007242:	9903      	ldr	r1, [sp, #12]
 8007244:	1a5b      	subs	r3, r3, r1
 8007246:	42ab      	cmp	r3, r5
 8007248:	dcf2      	bgt.n	8007230 <_printf_i+0x210>
 800724a:	e7eb      	b.n	8007224 <_printf_i+0x204>
 800724c:	2500      	movs	r5, #0
 800724e:	f104 0619 	add.w	r6, r4, #25
 8007252:	e7f5      	b.n	8007240 <_printf_i+0x220>
 8007254:	080081a9 	.word	0x080081a9
 8007258:	080081ba 	.word	0x080081ba

0800725c <memmove>:
 800725c:	4288      	cmp	r0, r1
 800725e:	b510      	push	{r4, lr}
 8007260:	eb01 0402 	add.w	r4, r1, r2
 8007264:	d902      	bls.n	800726c <memmove+0x10>
 8007266:	4284      	cmp	r4, r0
 8007268:	4623      	mov	r3, r4
 800726a:	d807      	bhi.n	800727c <memmove+0x20>
 800726c:	1e43      	subs	r3, r0, #1
 800726e:	42a1      	cmp	r1, r4
 8007270:	d008      	beq.n	8007284 <memmove+0x28>
 8007272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800727a:	e7f8      	b.n	800726e <memmove+0x12>
 800727c:	4402      	add	r2, r0
 800727e:	4601      	mov	r1, r0
 8007280:	428a      	cmp	r2, r1
 8007282:	d100      	bne.n	8007286 <memmove+0x2a>
 8007284:	bd10      	pop	{r4, pc}
 8007286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800728a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800728e:	e7f7      	b.n	8007280 <memmove+0x24>

08007290 <_sbrk_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4d06      	ldr	r5, [pc, #24]	@ (80072ac <_sbrk_r+0x1c>)
 8007294:	2300      	movs	r3, #0
 8007296:	4604      	mov	r4, r0
 8007298:	4608      	mov	r0, r1
 800729a:	602b      	str	r3, [r5, #0]
 800729c:	f7fa fad2 	bl	8001844 <_sbrk>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_sbrk_r+0x1a>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_sbrk_r+0x1a>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	20000778 	.word	0x20000778

080072b0 <memcpy>:
 80072b0:	440a      	add	r2, r1
 80072b2:	4291      	cmp	r1, r2
 80072b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072b8:	d100      	bne.n	80072bc <memcpy+0xc>
 80072ba:	4770      	bx	lr
 80072bc:	b510      	push	{r4, lr}
 80072be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072c6:	4291      	cmp	r1, r2
 80072c8:	d1f9      	bne.n	80072be <memcpy+0xe>
 80072ca:	bd10      	pop	{r4, pc}

080072cc <_realloc_r>:
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	4607      	mov	r7, r0
 80072d2:	4614      	mov	r4, r2
 80072d4:	460d      	mov	r5, r1
 80072d6:	b921      	cbnz	r1, 80072e2 <_realloc_r+0x16>
 80072d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072dc:	4611      	mov	r1, r2
 80072de:	f7ff bc4d 	b.w	8006b7c <_malloc_r>
 80072e2:	b92a      	cbnz	r2, 80072f0 <_realloc_r+0x24>
 80072e4:	f7ff fbde 	bl	8006aa4 <_free_r>
 80072e8:	4625      	mov	r5, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f0:	f000 f81a 	bl	8007328 <_malloc_usable_size_r>
 80072f4:	4284      	cmp	r4, r0
 80072f6:	4606      	mov	r6, r0
 80072f8:	d802      	bhi.n	8007300 <_realloc_r+0x34>
 80072fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072fe:	d8f4      	bhi.n	80072ea <_realloc_r+0x1e>
 8007300:	4621      	mov	r1, r4
 8007302:	4638      	mov	r0, r7
 8007304:	f7ff fc3a 	bl	8006b7c <_malloc_r>
 8007308:	4680      	mov	r8, r0
 800730a:	b908      	cbnz	r0, 8007310 <_realloc_r+0x44>
 800730c:	4645      	mov	r5, r8
 800730e:	e7ec      	b.n	80072ea <_realloc_r+0x1e>
 8007310:	42b4      	cmp	r4, r6
 8007312:	4622      	mov	r2, r4
 8007314:	4629      	mov	r1, r5
 8007316:	bf28      	it	cs
 8007318:	4632      	movcs	r2, r6
 800731a:	f7ff ffc9 	bl	80072b0 <memcpy>
 800731e:	4629      	mov	r1, r5
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff fbbf 	bl	8006aa4 <_free_r>
 8007326:	e7f1      	b.n	800730c <_realloc_r+0x40>

08007328 <_malloc_usable_size_r>:
 8007328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800732c:	1f18      	subs	r0, r3, #4
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfbc      	itt	lt
 8007332:	580b      	ldrlt	r3, [r1, r0]
 8007334:	18c0      	addlt	r0, r0, r3
 8007336:	4770      	bx	lr

08007338 <_init>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	bf00      	nop
 800733c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733e:	bc08      	pop	{r3}
 8007340:	469e      	mov	lr, r3
 8007342:	4770      	bx	lr

08007344 <_fini>:
 8007344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007346:	bf00      	nop
 8007348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734a:	bc08      	pop	{r3}
 800734c:	469e      	mov	lr, r3
 800734e:	4770      	bx	lr
